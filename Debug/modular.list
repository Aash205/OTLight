
modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004378  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000020  08004550  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004550  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000984e  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199f  00000000  00000000  0000f896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00011238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062d  00000000  00000000  00011a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ec9  00000000  00000000  0001205d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abc1  00000000  00000000  00022f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067263  00000000  00000000  0002dae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d50  00000000  00000000  00094d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00096ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004420 	.word	0x08004420

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08004420 	.word	0x08004420

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fc6f 	bl	8000b0c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fbef 	bl	8000a1c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fc61 	bl	8000b0c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc57 	bl	8000b0c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fbfd 	bl	8000a6c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fbf3 	bl	8000a6c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	@ (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f834 	bl	8000330 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4699      	mov	r9, r3
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	469c      	mov	ip, r3
 80002de:	0413      	lsls	r3, r2, #16
 80002e0:	4647      	mov	r7, r8
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	001d      	movs	r5, r3
 80002e6:	000e      	movs	r6, r1
 80002e8:	4661      	mov	r1, ip
 80002ea:	0404      	lsls	r4, r0, #16
 80002ec:	0c24      	lsrs	r4, r4, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	0007      	movs	r7, r0
 80002f2:	0c10      	lsrs	r0, r2, #16
 80002f4:	434b      	muls	r3, r1
 80002f6:	4365      	muls	r5, r4
 80002f8:	4341      	muls	r1, r0
 80002fa:	4360      	muls	r0, r4
 80002fc:	0c2c      	lsrs	r4, r5, #16
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	1824      	adds	r4, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	42a3      	cmp	r3, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4356      	muls	r6, r2
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	042d      	lsls	r5, r5, #16
 800031a:	0c2d      	lsrs	r5, r5, #16
 800031c:	1989      	adds	r1, r1, r6
 800031e:	4463      	add	r3, ip
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	1960      	adds	r0, r4, r5
 8000324:	18c9      	adds	r1, r1, r3
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			@ (mov r8, r8)

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	000d      	movs	r5, r1
 8000340:	4692      	mov	sl, r2
 8000342:	4699      	mov	r9, r3
 8000344:	b083      	sub	sp, #12
 8000346:	428b      	cmp	r3, r1
 8000348:	d830      	bhi.n	80003ac <__udivmoddi4+0x7c>
 800034a:	d02d      	beq.n	80003a8 <__udivmoddi4+0x78>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 ff6c 	bl	800122c <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 ff67 	bl	800122c <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	d434      	bmi.n	80003d0 <__udivmoddi4+0xa0>
 8000366:	469b      	mov	fp, r3
 8000368:	4653      	mov	r3, sl
 800036a:	465a      	mov	r2, fp
 800036c:	4093      	lsls	r3, r2
 800036e:	4642      	mov	r2, r8
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d83b      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800037c:	42af      	cmp	r7, r5
 800037e:	d100      	bne.n	8000382 <__udivmoddi4+0x52>
 8000380:	e079      	b.n	8000476 <__udivmoddi4+0x146>
 8000382:	465b      	mov	r3, fp
 8000384:	1ba4      	subs	r4, r4, r6
 8000386:	41bd      	sbcs	r5, r7
 8000388:	2b00      	cmp	r3, #0
 800038a:	da00      	bge.n	800038e <__udivmoddi4+0x5e>
 800038c:	e076      	b.n	800047c <__udivmoddi4+0x14c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	465a      	mov	r2, fp
 800039a:	4093      	lsls	r3, r2
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	4642      	mov	r2, r8
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e029      	b.n	80003fc <__udivmoddi4+0xcc>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	d9cf      	bls.n	800034c <__udivmoddi4+0x1c>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2300      	movs	r3, #0
 80003b0:	9200      	str	r2, [sp, #0]
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <__udivmoddi4+0x8e>
 80003ba:	601c      	str	r4, [r3, #0]
 80003bc:	605d      	str	r5, [r3, #4]
 80003be:	9800      	ldr	r0, [sp, #0]
 80003c0:	9901      	ldr	r1, [sp, #4]
 80003c2:	b003      	add	sp, #12
 80003c4:	bcf0      	pop	{r4, r5, r6, r7}
 80003c6:	46bb      	mov	fp, r7
 80003c8:	46b2      	mov	sl, r6
 80003ca:	46a9      	mov	r9, r5
 80003cc:	46a0      	mov	r8, r4
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	4642      	mov	r2, r8
 80003d2:	469b      	mov	fp, r3
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	4652      	mov	r2, sl
 80003da:	40da      	lsrs	r2, r3
 80003dc:	4641      	mov	r1, r8
 80003de:	0013      	movs	r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	408a      	lsls	r2, r1
 80003e4:	0017      	movs	r7, r2
 80003e6:	4642      	mov	r2, r8
 80003e8:	431f      	orrs	r7, r3
 80003ea:	4653      	mov	r3, sl
 80003ec:	4093      	lsls	r3, r2
 80003ee:	001e      	movs	r6, r3
 80003f0:	42af      	cmp	r7, r5
 80003f2:	d9c3      	bls.n	800037c <__udivmoddi4+0x4c>
 80003f4:	2200      	movs	r2, #0
 80003f6:	2300      	movs	r3, #0
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	4643      	mov	r3, r8
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0d8      	beq.n	80003b4 <__udivmoddi4+0x84>
 8000402:	07fb      	lsls	r3, r7, #31
 8000404:	0872      	lsrs	r2, r6, #1
 8000406:	431a      	orrs	r2, r3
 8000408:	4646      	mov	r6, r8
 800040a:	087b      	lsrs	r3, r7, #1
 800040c:	e00e      	b.n	800042c <__udivmoddi4+0xfc>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d101      	bne.n	8000416 <__udivmoddi4+0xe6>
 8000412:	42a2      	cmp	r2, r4
 8000414:	d80c      	bhi.n	8000430 <__udivmoddi4+0x100>
 8000416:	1aa4      	subs	r4, r4, r2
 8000418:	419d      	sbcs	r5, r3
 800041a:	2001      	movs	r0, #1
 800041c:	1924      	adds	r4, r4, r4
 800041e:	416d      	adcs	r5, r5
 8000420:	2100      	movs	r1, #0
 8000422:	3e01      	subs	r6, #1
 8000424:	1824      	adds	r4, r4, r0
 8000426:	414d      	adcs	r5, r1
 8000428:	2e00      	cmp	r6, #0
 800042a:	d006      	beq.n	800043a <__udivmoddi4+0x10a>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d9ee      	bls.n	800040e <__udivmoddi4+0xde>
 8000430:	3e01      	subs	r6, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d1f8      	bne.n	800042c <__udivmoddi4+0xfc>
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	465b      	mov	r3, fp
 8000440:	1900      	adds	r0, r0, r4
 8000442:	4169      	adcs	r1, r5
 8000444:	2b00      	cmp	r3, #0
 8000446:	db24      	blt.n	8000492 <__udivmoddi4+0x162>
 8000448:	002b      	movs	r3, r5
 800044a:	465a      	mov	r2, fp
 800044c:	4644      	mov	r4, r8
 800044e:	40d3      	lsrs	r3, r2
 8000450:	002a      	movs	r2, r5
 8000452:	40e2      	lsrs	r2, r4
 8000454:	001c      	movs	r4, r3
 8000456:	465b      	mov	r3, fp
 8000458:	0015      	movs	r5, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	db2a      	blt.n	80004b4 <__udivmoddi4+0x184>
 800045e:	0026      	movs	r6, r4
 8000460:	409e      	lsls	r6, r3
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4647      	mov	r7, r8
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e79e      	b.n	80003b4 <__udivmoddi4+0x84>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d8bc      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800047a:	e782      	b.n	8000382 <__udivmoddi4+0x52>
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	2100      	movs	r1, #0
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	9100      	str	r1, [sp, #0]
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	2201      	movs	r2, #1
 800048c:	40da      	lsrs	r2, r3
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	e785      	b.n	800039e <__udivmoddi4+0x6e>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	002a      	movs	r2, r5
 800049a:	4646      	mov	r6, r8
 800049c:	409a      	lsls	r2, r3
 800049e:	0023      	movs	r3, r4
 80004a0:	40f3      	lsrs	r3, r6
 80004a2:	4644      	mov	r4, r8
 80004a4:	4313      	orrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dad4      	bge.n	800045e <__udivmoddi4+0x12e>
 80004b4:	4642      	mov	r2, r8
 80004b6:	002f      	movs	r7, r5
 80004b8:	2320      	movs	r3, #32
 80004ba:	0026      	movs	r6, r4
 80004bc:	4097      	lsls	r7, r2
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	003b      	movs	r3, r7
 80004c4:	4333      	orrs	r3, r6
 80004c6:	e7cd      	b.n	8000464 <__udivmoddi4+0x134>

080004c8 <__aeabi_fadd>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	46ce      	mov	lr, r9
 80004cc:	4647      	mov	r7, r8
 80004ce:	0243      	lsls	r3, r0, #9
 80004d0:	0a5a      	lsrs	r2, r3, #9
 80004d2:	024e      	lsls	r6, r1, #9
 80004d4:	0045      	lsls	r5, r0, #1
 80004d6:	0fc4      	lsrs	r4, r0, #31
 80004d8:	0048      	lsls	r0, r1, #1
 80004da:	4691      	mov	r9, r2
 80004dc:	0e2d      	lsrs	r5, r5, #24
 80004de:	0a72      	lsrs	r2, r6, #9
 80004e0:	0e00      	lsrs	r0, r0, #24
 80004e2:	4694      	mov	ip, r2
 80004e4:	b580      	push	{r7, lr}
 80004e6:	099b      	lsrs	r3, r3, #6
 80004e8:	0fc9      	lsrs	r1, r1, #31
 80004ea:	09b6      	lsrs	r6, r6, #6
 80004ec:	1a2a      	subs	r2, r5, r0
 80004ee:	428c      	cmp	r4, r1
 80004f0:	d021      	beq.n	8000536 <__aeabi_fadd+0x6e>
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	dd0d      	ble.n	8000512 <__aeabi_fadd+0x4a>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d12d      	bne.n	8000556 <__aeabi_fadd+0x8e>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fadd+0x38>
 80004fe:	e08d      	b.n	800061c <__aeabi_fadd+0x154>
 8000500:	1e51      	subs	r1, r2, #1
 8000502:	2a01      	cmp	r2, #1
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x40>
 8000506:	e11d      	b.n	8000744 <__aeabi_fadd+0x27c>
 8000508:	2aff      	cmp	r2, #255	@ 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x46>
 800050c:	e0ab      	b.n	8000666 <__aeabi_fadd+0x19e>
 800050e:	000a      	movs	r2, r1
 8000510:	e027      	b.n	8000562 <__aeabi_fadd+0x9a>
 8000512:	2a00      	cmp	r2, #0
 8000514:	d04d      	beq.n	80005b2 <__aeabi_fadd+0xea>
 8000516:	1b42      	subs	r2, r0, r5
 8000518:	2d00      	cmp	r5, #0
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x56>
 800051c:	e0cc      	b.n	80006b8 <__aeabi_fadd+0x1f0>
 800051e:	2b00      	cmp	r3, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x5c>
 8000522:	e079      	b.n	8000618 <__aeabi_fadd+0x150>
 8000524:	1e54      	subs	r4, r2, #1
 8000526:	2a01      	cmp	r2, #1
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x64>
 800052a:	e128      	b.n	800077e <__aeabi_fadd+0x2b6>
 800052c:	2aff      	cmp	r2, #255	@ 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x6a>
 8000530:	e097      	b.n	8000662 <__aeabi_fadd+0x19a>
 8000532:	0022      	movs	r2, r4
 8000534:	e0c5      	b.n	80006c2 <__aeabi_fadd+0x1fa>
 8000536:	2a00      	cmp	r2, #0
 8000538:	dc00      	bgt.n	800053c <__aeabi_fadd+0x74>
 800053a:	e096      	b.n	800066a <__aeabi_fadd+0x1a2>
 800053c:	2800      	cmp	r0, #0
 800053e:	d04f      	beq.n	80005e0 <__aeabi_fadd+0x118>
 8000540:	2dff      	cmp	r5, #255	@ 0xff
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x7e>
 8000544:	e08f      	b.n	8000666 <__aeabi_fadd+0x19e>
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	04c9      	lsls	r1, r1, #19
 800054a:	430e      	orrs	r6, r1
 800054c:	2a1b      	cmp	r2, #27
 800054e:	dd51      	ble.n	80005f4 <__aeabi_fadd+0x12c>
 8000550:	002a      	movs	r2, r5
 8000552:	3301      	adds	r3, #1
 8000554:	e018      	b.n	8000588 <__aeabi_fadd+0xc0>
 8000556:	2dff      	cmp	r5, #255	@ 0xff
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x94>
 800055a:	e084      	b.n	8000666 <__aeabi_fadd+0x19e>
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	04c9      	lsls	r1, r1, #19
 8000560:	430e      	orrs	r6, r1
 8000562:	2101      	movs	r1, #1
 8000564:	2a1b      	cmp	r2, #27
 8000566:	dc08      	bgt.n	800057a <__aeabi_fadd+0xb2>
 8000568:	0031      	movs	r1, r6
 800056a:	2020      	movs	r0, #32
 800056c:	40d1      	lsrs	r1, r2
 800056e:	1a82      	subs	r2, r0, r2
 8000570:	4096      	lsls	r6, r2
 8000572:	0032      	movs	r2, r6
 8000574:	1e50      	subs	r0, r2, #1
 8000576:	4182      	sbcs	r2, r0
 8000578:	4311      	orrs	r1, r2
 800057a:	1a5b      	subs	r3, r3, r1
 800057c:	015a      	lsls	r2, r3, #5
 800057e:	d459      	bmi.n	8000634 <__aeabi_fadd+0x16c>
 8000580:	2107      	movs	r1, #7
 8000582:	002a      	movs	r2, r5
 8000584:	4019      	ands	r1, r3
 8000586:	d049      	beq.n	800061c <__aeabi_fadd+0x154>
 8000588:	210f      	movs	r1, #15
 800058a:	4019      	ands	r1, r3
 800058c:	2904      	cmp	r1, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xca>
 8000590:	3304      	adds	r3, #4
 8000592:	0159      	lsls	r1, r3, #5
 8000594:	d542      	bpl.n	800061c <__aeabi_fadd+0x154>
 8000596:	1c50      	adds	r0, r2, #1
 8000598:	2afe      	cmp	r2, #254	@ 0xfe
 800059a:	d03a      	beq.n	8000612 <__aeabi_fadd+0x14a>
 800059c:	019b      	lsls	r3, r3, #6
 800059e:	b2c0      	uxtb	r0, r0
 80005a0:	0a5b      	lsrs	r3, r3, #9
 80005a2:	05c0      	lsls	r0, r0, #23
 80005a4:	4318      	orrs	r0, r3
 80005a6:	07e4      	lsls	r4, r4, #31
 80005a8:	4320      	orrs	r0, r4
 80005aa:	bcc0      	pop	{r6, r7}
 80005ac:	46b9      	mov	r9, r7
 80005ae:	46b0      	mov	r8, r6
 80005b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005b2:	20fe      	movs	r0, #254	@ 0xfe
 80005b4:	4680      	mov	r8, r0
 80005b6:	1c6f      	adds	r7, r5, #1
 80005b8:	0038      	movs	r0, r7
 80005ba:	4647      	mov	r7, r8
 80005bc:	4207      	tst	r7, r0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0xfa>
 80005c0:	e08e      	b.n	80006e0 <__aeabi_fadd+0x218>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x100>
 80005c6:	e0b4      	b.n	8000732 <__aeabi_fadd+0x26a>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x106>
 80005cc:	e0db      	b.n	8000786 <__aeabi_fadd+0x2be>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d06c      	beq.n	80006ac <__aeabi_fadd+0x1e4>
 80005d2:	1b98      	subs	r0, r3, r6
 80005d4:	0145      	lsls	r5, r0, #5
 80005d6:	d400      	bmi.n	80005da <__aeabi_fadd+0x112>
 80005d8:	e0f7      	b.n	80007ca <__aeabi_fadd+0x302>
 80005da:	000c      	movs	r4, r1
 80005dc:	1af3      	subs	r3, r6, r3
 80005de:	e03d      	b.n	800065c <__aeabi_fadd+0x194>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d01b      	beq.n	800061c <__aeabi_fadd+0x154>
 80005e4:	1e51      	subs	r1, r2, #1
 80005e6:	2a01      	cmp	r2, #1
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x124>
 80005ea:	e082      	b.n	80006f2 <__aeabi_fadd+0x22a>
 80005ec:	2aff      	cmp	r2, #255	@ 0xff
 80005ee:	d03a      	beq.n	8000666 <__aeabi_fadd+0x19e>
 80005f0:	000a      	movs	r2, r1
 80005f2:	e7ab      	b.n	800054c <__aeabi_fadd+0x84>
 80005f4:	0031      	movs	r1, r6
 80005f6:	2020      	movs	r0, #32
 80005f8:	40d1      	lsrs	r1, r2
 80005fa:	1a82      	subs	r2, r0, r2
 80005fc:	4096      	lsls	r6, r2
 80005fe:	0032      	movs	r2, r6
 8000600:	1e50      	subs	r0, r2, #1
 8000602:	4182      	sbcs	r2, r0
 8000604:	430a      	orrs	r2, r1
 8000606:	189b      	adds	r3, r3, r2
 8000608:	015a      	lsls	r2, r3, #5
 800060a:	d5b9      	bpl.n	8000580 <__aeabi_fadd+0xb8>
 800060c:	1c6a      	adds	r2, r5, #1
 800060e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000610:	d175      	bne.n	80006fe <__aeabi_fadd+0x236>
 8000612:	20ff      	movs	r0, #255	@ 0xff
 8000614:	2300      	movs	r3, #0
 8000616:	e7c4      	b.n	80005a2 <__aeabi_fadd+0xda>
 8000618:	000c      	movs	r4, r1
 800061a:	0033      	movs	r3, r6
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	2aff      	cmp	r2, #255	@ 0xff
 8000620:	d146      	bne.n	80006b0 <__aeabi_fadd+0x1e8>
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f5      	beq.n	8000612 <__aeabi_fadd+0x14a>
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	03d2      	lsls	r2, r2, #15
 800062a:	4313      	orrs	r3, r2
 800062c:	025b      	lsls	r3, r3, #9
 800062e:	20ff      	movs	r0, #255	@ 0xff
 8000630:	0a5b      	lsrs	r3, r3, #9
 8000632:	e7b6      	b.n	80005a2 <__aeabi_fadd+0xda>
 8000634:	019f      	lsls	r7, r3, #6
 8000636:	09bf      	lsrs	r7, r7, #6
 8000638:	0038      	movs	r0, r7
 800063a:	f000 fdd9 	bl	80011f0 <__clzsi2>
 800063e:	3805      	subs	r0, #5
 8000640:	4087      	lsls	r7, r0
 8000642:	4285      	cmp	r5, r0
 8000644:	dc24      	bgt.n	8000690 <__aeabi_fadd+0x1c8>
 8000646:	003b      	movs	r3, r7
 8000648:	2120      	movs	r1, #32
 800064a:	1b42      	subs	r2, r0, r5
 800064c:	3201      	adds	r2, #1
 800064e:	40d3      	lsrs	r3, r2
 8000650:	1a8a      	subs	r2, r1, r2
 8000652:	4097      	lsls	r7, r2
 8000654:	1e7a      	subs	r2, r7, #1
 8000656:	4197      	sbcs	r7, r2
 8000658:	2200      	movs	r2, #0
 800065a:	433b      	orrs	r3, r7
 800065c:	0759      	lsls	r1, r3, #29
 800065e:	d193      	bne.n	8000588 <__aeabi_fadd+0xc0>
 8000660:	e797      	b.n	8000592 <__aeabi_fadd+0xca>
 8000662:	000c      	movs	r4, r1
 8000664:	0033      	movs	r3, r6
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	e7db      	b.n	8000622 <__aeabi_fadd+0x15a>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d014      	beq.n	8000698 <__aeabi_fadd+0x1d0>
 800066e:	1b42      	subs	r2, r0, r5
 8000670:	2d00      	cmp	r5, #0
 8000672:	d14b      	bne.n	800070c <__aeabi_fadd+0x244>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0d0      	beq.n	800061a <__aeabi_fadd+0x152>
 8000678:	1e51      	subs	r1, r2, #1
 800067a:	2a01      	cmp	r2, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x1b8>
 800067e:	e09e      	b.n	80007be <__aeabi_fadd+0x2f6>
 8000680:	2aff      	cmp	r2, #255	@ 0xff
 8000682:	d0ef      	beq.n	8000664 <__aeabi_fadd+0x19c>
 8000684:	000a      	movs	r2, r1
 8000686:	2a1b      	cmp	r2, #27
 8000688:	dd5f      	ble.n	800074a <__aeabi_fadd+0x282>
 800068a:	0002      	movs	r2, r0
 800068c:	1c73      	adds	r3, r6, #1
 800068e:	e77b      	b.n	8000588 <__aeabi_fadd+0xc0>
 8000690:	4b50      	ldr	r3, [pc, #320]	@ (80007d4 <__aeabi_fadd+0x30c>)
 8000692:	1a2a      	subs	r2, r5, r0
 8000694:	403b      	ands	r3, r7
 8000696:	e7e1      	b.n	800065c <__aeabi_fadd+0x194>
 8000698:	21fe      	movs	r1, #254	@ 0xfe
 800069a:	1c6a      	adds	r2, r5, #1
 800069c:	4211      	tst	r1, r2
 800069e:	d13b      	bne.n	8000718 <__aeabi_fadd+0x250>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d15d      	bne.n	8000760 <__aeabi_fadd+0x298>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d07f      	beq.n	80007a8 <__aeabi_fadd+0x2e0>
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d17f      	bne.n	80007ac <__aeabi_fadd+0x2e4>
 80006ac:	2200      	movs	r2, #0
 80006ae:	08db      	lsrs	r3, r3, #3
 80006b0:	025b      	lsls	r3, r3, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	b2d0      	uxtb	r0, r2
 80006b6:	e774      	b.n	80005a2 <__aeabi_fadd+0xda>
 80006b8:	28ff      	cmp	r0, #255	@ 0xff
 80006ba:	d0d2      	beq.n	8000662 <__aeabi_fadd+0x19a>
 80006bc:	2480      	movs	r4, #128	@ 0x80
 80006be:	04e4      	lsls	r4, r4, #19
 80006c0:	4323      	orrs	r3, r4
 80006c2:	2401      	movs	r4, #1
 80006c4:	2a1b      	cmp	r2, #27
 80006c6:	dc07      	bgt.n	80006d8 <__aeabi_fadd+0x210>
 80006c8:	001c      	movs	r4, r3
 80006ca:	2520      	movs	r5, #32
 80006cc:	40d4      	lsrs	r4, r2
 80006ce:	1aaa      	subs	r2, r5, r2
 80006d0:	4093      	lsls	r3, r2
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
 80006d6:	431c      	orrs	r4, r3
 80006d8:	1b33      	subs	r3, r6, r4
 80006da:	0005      	movs	r5, r0
 80006dc:	000c      	movs	r4, r1
 80006de:	e74d      	b.n	800057c <__aeabi_fadd+0xb4>
 80006e0:	1b9f      	subs	r7, r3, r6
 80006e2:	017a      	lsls	r2, r7, #5
 80006e4:	d422      	bmi.n	800072c <__aeabi_fadd+0x264>
 80006e6:	2f00      	cmp	r7, #0
 80006e8:	d1a6      	bne.n	8000638 <__aeabi_fadd+0x170>
 80006ea:	2400      	movs	r4, #0
 80006ec:	2000      	movs	r0, #0
 80006ee:	2300      	movs	r3, #0
 80006f0:	e757      	b.n	80005a2 <__aeabi_fadd+0xda>
 80006f2:	199b      	adds	r3, r3, r6
 80006f4:	2501      	movs	r5, #1
 80006f6:	3201      	adds	r2, #1
 80006f8:	0159      	lsls	r1, r3, #5
 80006fa:	d400      	bmi.n	80006fe <__aeabi_fadd+0x236>
 80006fc:	e740      	b.n	8000580 <__aeabi_fadd+0xb8>
 80006fe:	2101      	movs	r1, #1
 8000700:	4835      	ldr	r0, [pc, #212]	@ (80007d8 <__aeabi_fadd+0x310>)
 8000702:	4019      	ands	r1, r3
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	4003      	ands	r3, r0
 8000708:	430b      	orrs	r3, r1
 800070a:	e7a7      	b.n	800065c <__aeabi_fadd+0x194>
 800070c:	28ff      	cmp	r0, #255	@ 0xff
 800070e:	d0a9      	beq.n	8000664 <__aeabi_fadd+0x19c>
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	04c9      	lsls	r1, r1, #19
 8000714:	430b      	orrs	r3, r1
 8000716:	e7b6      	b.n	8000686 <__aeabi_fadd+0x1be>
 8000718:	2aff      	cmp	r2, #255	@ 0xff
 800071a:	d100      	bne.n	800071e <__aeabi_fadd+0x256>
 800071c:	e779      	b.n	8000612 <__aeabi_fadd+0x14a>
 800071e:	199b      	adds	r3, r3, r6
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	0759      	lsls	r1, r3, #29
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x260>
 8000726:	e72f      	b.n	8000588 <__aeabi_fadd+0xc0>
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	e7c1      	b.n	80006b0 <__aeabi_fadd+0x1e8>
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e782      	b.n	8000638 <__aeabi_fadd+0x170>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d12c      	bne.n	8000790 <__aeabi_fadd+0x2c8>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d193      	bne.n	8000662 <__aeabi_fadd+0x19a>
 800073a:	2380      	movs	r3, #128	@ 0x80
 800073c:	2400      	movs	r4, #0
 800073e:	20ff      	movs	r0, #255	@ 0xff
 8000740:	03db      	lsls	r3, r3, #15
 8000742:	e72e      	b.n	80005a2 <__aeabi_fadd+0xda>
 8000744:	2501      	movs	r5, #1
 8000746:	1b9b      	subs	r3, r3, r6
 8000748:	e718      	b.n	800057c <__aeabi_fadd+0xb4>
 800074a:	0019      	movs	r1, r3
 800074c:	2520      	movs	r5, #32
 800074e:	40d1      	lsrs	r1, r2
 8000750:	1aaa      	subs	r2, r5, r2
 8000752:	4093      	lsls	r3, r2
 8000754:	1e5a      	subs	r2, r3, #1
 8000756:	4193      	sbcs	r3, r2
 8000758:	430b      	orrs	r3, r1
 800075a:	0005      	movs	r5, r0
 800075c:	199b      	adds	r3, r3, r6
 800075e:	e753      	b.n	8000608 <__aeabi_fadd+0x140>
 8000760:	2b00      	cmp	r3, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x29e>
 8000764:	e77e      	b.n	8000664 <__aeabi_fadd+0x19c>
 8000766:	2e00      	cmp	r6, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0x2a4>
 800076a:	e77c      	b.n	8000666 <__aeabi_fadd+0x19e>
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	03d2      	lsls	r2, r2, #15
 8000770:	4591      	cmp	r9, r2
 8000772:	d302      	bcc.n	800077a <__aeabi_fadd+0x2b2>
 8000774:	4594      	cmp	ip, r2
 8000776:	d200      	bcs.n	800077a <__aeabi_fadd+0x2b2>
 8000778:	0033      	movs	r3, r6
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	e753      	b.n	8000626 <__aeabi_fadd+0x15e>
 800077e:	000c      	movs	r4, r1
 8000780:	1af3      	subs	r3, r6, r3
 8000782:	3501      	adds	r5, #1
 8000784:	e6fa      	b.n	800057c <__aeabi_fadd+0xb4>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d0af      	beq.n	80006ea <__aeabi_fadd+0x222>
 800078a:	000c      	movs	r4, r1
 800078c:	0033      	movs	r3, r6
 800078e:	e78d      	b.n	80006ac <__aeabi_fadd+0x1e4>
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x2ce>
 8000794:	e767      	b.n	8000666 <__aeabi_fadd+0x19e>
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	4591      	cmp	r9, r2
 800079c:	d3ed      	bcc.n	800077a <__aeabi_fadd+0x2b2>
 800079e:	4594      	cmp	ip, r2
 80007a0:	d2eb      	bcs.n	800077a <__aeabi_fadd+0x2b2>
 80007a2:	000c      	movs	r4, r1
 80007a4:	0033      	movs	r3, r6
 80007a6:	e7e8      	b.n	800077a <__aeabi_fadd+0x2b2>
 80007a8:	0033      	movs	r3, r6
 80007aa:	e77f      	b.n	80006ac <__aeabi_fadd+0x1e4>
 80007ac:	199b      	adds	r3, r3, r6
 80007ae:	2200      	movs	r2, #0
 80007b0:	0159      	lsls	r1, r3, #5
 80007b2:	d5b9      	bpl.n	8000728 <__aeabi_fadd+0x260>
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <__aeabi_fadd+0x30c>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	2201      	movs	r2, #1
 80007bc:	e778      	b.n	80006b0 <__aeabi_fadd+0x1e8>
 80007be:	199b      	adds	r3, r3, r6
 80007c0:	3201      	adds	r2, #1
 80007c2:	3501      	adds	r5, #1
 80007c4:	0159      	lsls	r1, r3, #5
 80007c6:	d49a      	bmi.n	80006fe <__aeabi_fadd+0x236>
 80007c8:	e6da      	b.n	8000580 <__aeabi_fadd+0xb8>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d08d      	beq.n	80006ea <__aeabi_fadd+0x222>
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	e76e      	b.n	80006b0 <__aeabi_fadd+0x1e8>
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	fbffffff 	.word	0xfbffffff
 80007d8:	7dffffff 	.word	0x7dffffff

080007dc <__aeabi_fdiv>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	464f      	mov	r7, r9
 80007e0:	4646      	mov	r6, r8
 80007e2:	46d6      	mov	lr, sl
 80007e4:	0244      	lsls	r4, r0, #9
 80007e6:	b5c0      	push	{r6, r7, lr}
 80007e8:	0047      	lsls	r7, r0, #1
 80007ea:	1c0e      	adds	r6, r1, #0
 80007ec:	0a64      	lsrs	r4, r4, #9
 80007ee:	0e3f      	lsrs	r7, r7, #24
 80007f0:	0fc5      	lsrs	r5, r0, #31
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d03c      	beq.n	8000870 <__aeabi_fdiv+0x94>
 80007f6:	2fff      	cmp	r7, #255	@ 0xff
 80007f8:	d042      	beq.n	8000880 <__aeabi_fdiv+0xa4>
 80007fa:	2300      	movs	r3, #0
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	4699      	mov	r9, r3
 8000800:	469a      	mov	sl, r3
 8000802:	00e4      	lsls	r4, r4, #3
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4314      	orrs	r4, r2
 8000808:	3f7f      	subs	r7, #127	@ 0x7f
 800080a:	0273      	lsls	r3, r6, #9
 800080c:	0a5b      	lsrs	r3, r3, #9
 800080e:	4698      	mov	r8, r3
 8000810:	0073      	lsls	r3, r6, #1
 8000812:	0e1b      	lsrs	r3, r3, #24
 8000814:	0ff6      	lsrs	r6, r6, #31
 8000816:	2b00      	cmp	r3, #0
 8000818:	d01b      	beq.n	8000852 <__aeabi_fdiv+0x76>
 800081a:	2bff      	cmp	r3, #255	@ 0xff
 800081c:	d013      	beq.n	8000846 <__aeabi_fdiv+0x6a>
 800081e:	4642      	mov	r2, r8
 8000820:	2180      	movs	r1, #128	@ 0x80
 8000822:	00d2      	lsls	r2, r2, #3
 8000824:	04c9      	lsls	r1, r1, #19
 8000826:	4311      	orrs	r1, r2
 8000828:	4688      	mov	r8, r1
 800082a:	2000      	movs	r0, #0
 800082c:	3b7f      	subs	r3, #127	@ 0x7f
 800082e:	0029      	movs	r1, r5
 8000830:	1aff      	subs	r7, r7, r3
 8000832:	464b      	mov	r3, r9
 8000834:	4071      	eors	r1, r6
 8000836:	b2c9      	uxtb	r1, r1
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d900      	bls.n	800083e <__aeabi_fdiv+0x62>
 800083c:	e0b5      	b.n	80009aa <__aeabi_fdiv+0x1ce>
 800083e:	4a74      	ldr	r2, [pc, #464]	@ (8000a10 <__aeabi_fdiv+0x234>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	58d3      	ldr	r3, [r2, r3]
 8000844:	469f      	mov	pc, r3
 8000846:	4643      	mov	r3, r8
 8000848:	2b00      	cmp	r3, #0
 800084a:	d13f      	bne.n	80008cc <__aeabi_fdiv+0xf0>
 800084c:	3fff      	subs	r7, #255	@ 0xff
 800084e:	3302      	adds	r3, #2
 8000850:	e003      	b.n	800085a <__aeabi_fdiv+0x7e>
 8000852:	4643      	mov	r3, r8
 8000854:	2b00      	cmp	r3, #0
 8000856:	d12d      	bne.n	80008b4 <__aeabi_fdiv+0xd8>
 8000858:	2301      	movs	r3, #1
 800085a:	0029      	movs	r1, r5
 800085c:	464a      	mov	r2, r9
 800085e:	4071      	eors	r1, r6
 8000860:	b2c9      	uxtb	r1, r1
 8000862:	431a      	orrs	r2, r3
 8000864:	2a0e      	cmp	r2, #14
 8000866:	d838      	bhi.n	80008da <__aeabi_fdiv+0xfe>
 8000868:	486a      	ldr	r0, [pc, #424]	@ (8000a14 <__aeabi_fdiv+0x238>)
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	5882      	ldr	r2, [r0, r2]
 800086e:	4697      	mov	pc, r2
 8000870:	2c00      	cmp	r4, #0
 8000872:	d113      	bne.n	800089c <__aeabi_fdiv+0xc0>
 8000874:	2304      	movs	r3, #4
 8000876:	4699      	mov	r9, r3
 8000878:	3b03      	subs	r3, #3
 800087a:	2700      	movs	r7, #0
 800087c:	469a      	mov	sl, r3
 800087e:	e7c4      	b.n	800080a <__aeabi_fdiv+0x2e>
 8000880:	2c00      	cmp	r4, #0
 8000882:	d105      	bne.n	8000890 <__aeabi_fdiv+0xb4>
 8000884:	2308      	movs	r3, #8
 8000886:	4699      	mov	r9, r3
 8000888:	3b06      	subs	r3, #6
 800088a:	27ff      	movs	r7, #255	@ 0xff
 800088c:	469a      	mov	sl, r3
 800088e:	e7bc      	b.n	800080a <__aeabi_fdiv+0x2e>
 8000890:	230c      	movs	r3, #12
 8000892:	4699      	mov	r9, r3
 8000894:	3b09      	subs	r3, #9
 8000896:	27ff      	movs	r7, #255	@ 0xff
 8000898:	469a      	mov	sl, r3
 800089a:	e7b6      	b.n	800080a <__aeabi_fdiv+0x2e>
 800089c:	0020      	movs	r0, r4
 800089e:	f000 fca7 	bl	80011f0 <__clzsi2>
 80008a2:	2776      	movs	r7, #118	@ 0x76
 80008a4:	1f43      	subs	r3, r0, #5
 80008a6:	409c      	lsls	r4, r3
 80008a8:	2300      	movs	r3, #0
 80008aa:	427f      	negs	r7, r7
 80008ac:	4699      	mov	r9, r3
 80008ae:	469a      	mov	sl, r3
 80008b0:	1a3f      	subs	r7, r7, r0
 80008b2:	e7aa      	b.n	800080a <__aeabi_fdiv+0x2e>
 80008b4:	4640      	mov	r0, r8
 80008b6:	f000 fc9b 	bl	80011f0 <__clzsi2>
 80008ba:	4642      	mov	r2, r8
 80008bc:	1f43      	subs	r3, r0, #5
 80008be:	409a      	lsls	r2, r3
 80008c0:	2376      	movs	r3, #118	@ 0x76
 80008c2:	425b      	negs	r3, r3
 80008c4:	1a1b      	subs	r3, r3, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	e7b0      	b.n	800082e <__aeabi_fdiv+0x52>
 80008cc:	2303      	movs	r3, #3
 80008ce:	464a      	mov	r2, r9
 80008d0:	431a      	orrs	r2, r3
 80008d2:	4691      	mov	r9, r2
 80008d4:	2003      	movs	r0, #3
 80008d6:	33fc      	adds	r3, #252	@ 0xfc
 80008d8:	e7a9      	b.n	800082e <__aeabi_fdiv+0x52>
 80008da:	000d      	movs	r5, r1
 80008dc:	20ff      	movs	r0, #255	@ 0xff
 80008de:	2200      	movs	r2, #0
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	07ed      	lsls	r5, r5, #31
 80008e4:	4310      	orrs	r0, r2
 80008e6:	4328      	orrs	r0, r5
 80008e8:	bce0      	pop	{r5, r6, r7}
 80008ea:	46ba      	mov	sl, r7
 80008ec:	46b1      	mov	r9, r6
 80008ee:	46a8      	mov	r8, r5
 80008f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f2:	000d      	movs	r5, r1
 80008f4:	2000      	movs	r0, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	e7f2      	b.n	80008e0 <__aeabi_fdiv+0x104>
 80008fa:	4653      	mov	r3, sl
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d0ed      	beq.n	80008dc <__aeabi_fdiv+0x100>
 8000900:	2b03      	cmp	r3, #3
 8000902:	d033      	beq.n	800096c <__aeabi_fdiv+0x190>
 8000904:	46a0      	mov	r8, r4
 8000906:	2b01      	cmp	r3, #1
 8000908:	d105      	bne.n	8000916 <__aeabi_fdiv+0x13a>
 800090a:	2000      	movs	r0, #0
 800090c:	2200      	movs	r2, #0
 800090e:	e7e7      	b.n	80008e0 <__aeabi_fdiv+0x104>
 8000910:	0035      	movs	r5, r6
 8000912:	2803      	cmp	r0, #3
 8000914:	d07a      	beq.n	8000a0c <__aeabi_fdiv+0x230>
 8000916:	003b      	movs	r3, r7
 8000918:	337f      	adds	r3, #127	@ 0x7f
 800091a:	2b00      	cmp	r3, #0
 800091c:	dd2d      	ble.n	800097a <__aeabi_fdiv+0x19e>
 800091e:	4642      	mov	r2, r8
 8000920:	0752      	lsls	r2, r2, #29
 8000922:	d007      	beq.n	8000934 <__aeabi_fdiv+0x158>
 8000924:	220f      	movs	r2, #15
 8000926:	4641      	mov	r1, r8
 8000928:	400a      	ands	r2, r1
 800092a:	2a04      	cmp	r2, #4
 800092c:	d002      	beq.n	8000934 <__aeabi_fdiv+0x158>
 800092e:	2204      	movs	r2, #4
 8000930:	4694      	mov	ip, r2
 8000932:	44e0      	add	r8, ip
 8000934:	4642      	mov	r2, r8
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	d505      	bpl.n	8000946 <__aeabi_fdiv+0x16a>
 800093a:	4642      	mov	r2, r8
 800093c:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <__aeabi_fdiv+0x23c>)
 800093e:	401a      	ands	r2, r3
 8000940:	003b      	movs	r3, r7
 8000942:	4690      	mov	r8, r2
 8000944:	3380      	adds	r3, #128	@ 0x80
 8000946:	2bfe      	cmp	r3, #254	@ 0xfe
 8000948:	dcc8      	bgt.n	80008dc <__aeabi_fdiv+0x100>
 800094a:	4642      	mov	r2, r8
 800094c:	0192      	lsls	r2, r2, #6
 800094e:	0a52      	lsrs	r2, r2, #9
 8000950:	b2d8      	uxtb	r0, r3
 8000952:	e7c5      	b.n	80008e0 <__aeabi_fdiv+0x104>
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	2500      	movs	r5, #0
 8000958:	20ff      	movs	r0, #255	@ 0xff
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	e7c0      	b.n	80008e0 <__aeabi_fdiv+0x104>
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4214      	tst	r4, r2
 8000964:	d002      	beq.n	800096c <__aeabi_fdiv+0x190>
 8000966:	4643      	mov	r3, r8
 8000968:	4213      	tst	r3, r2
 800096a:	d049      	beq.n	8000a00 <__aeabi_fdiv+0x224>
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4322      	orrs	r2, r4
 8000972:	0252      	lsls	r2, r2, #9
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	0a52      	lsrs	r2, r2, #9
 8000978:	e7b2      	b.n	80008e0 <__aeabi_fdiv+0x104>
 800097a:	2201      	movs	r2, #1
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b1b      	cmp	r3, #27
 8000980:	dcc3      	bgt.n	800090a <__aeabi_fdiv+0x12e>
 8000982:	4642      	mov	r2, r8
 8000984:	40da      	lsrs	r2, r3
 8000986:	4643      	mov	r3, r8
 8000988:	379e      	adds	r7, #158	@ 0x9e
 800098a:	40bb      	lsls	r3, r7
 800098c:	1e59      	subs	r1, r3, #1
 800098e:	418b      	sbcs	r3, r1
 8000990:	431a      	orrs	r2, r3
 8000992:	0753      	lsls	r3, r2, #29
 8000994:	d004      	beq.n	80009a0 <__aeabi_fdiv+0x1c4>
 8000996:	230f      	movs	r3, #15
 8000998:	4013      	ands	r3, r2
 800099a:	2b04      	cmp	r3, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_fdiv+0x1c4>
 800099e:	3204      	adds	r2, #4
 80009a0:	0153      	lsls	r3, r2, #5
 80009a2:	d529      	bpl.n	80009f8 <__aeabi_fdiv+0x21c>
 80009a4:	2001      	movs	r0, #1
 80009a6:	2200      	movs	r2, #0
 80009a8:	e79a      	b.n	80008e0 <__aeabi_fdiv+0x104>
 80009aa:	4642      	mov	r2, r8
 80009ac:	0163      	lsls	r3, r4, #5
 80009ae:	0155      	lsls	r5, r2, #5
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	d215      	bcs.n	80009e0 <__aeabi_fdiv+0x204>
 80009b4:	201b      	movs	r0, #27
 80009b6:	2200      	movs	r2, #0
 80009b8:	3f01      	subs	r7, #1
 80009ba:	2601      	movs	r6, #1
 80009bc:	001c      	movs	r4, r3
 80009be:	0052      	lsls	r2, r2, #1
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	db01      	blt.n	80009ca <__aeabi_fdiv+0x1ee>
 80009c6:	429d      	cmp	r5, r3
 80009c8:	d801      	bhi.n	80009ce <__aeabi_fdiv+0x1f2>
 80009ca:	1b5b      	subs	r3, r3, r5
 80009cc:	4332      	orrs	r2, r6
 80009ce:	3801      	subs	r0, #1
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d1f3      	bne.n	80009bc <__aeabi_fdiv+0x1e0>
 80009d4:	1e58      	subs	r0, r3, #1
 80009d6:	4183      	sbcs	r3, r0
 80009d8:	4313      	orrs	r3, r2
 80009da:	4698      	mov	r8, r3
 80009dc:	000d      	movs	r5, r1
 80009de:	e79a      	b.n	8000916 <__aeabi_fdiv+0x13a>
 80009e0:	201a      	movs	r0, #26
 80009e2:	2201      	movs	r2, #1
 80009e4:	1b5b      	subs	r3, r3, r5
 80009e6:	e7e8      	b.n	80009ba <__aeabi_fdiv+0x1de>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	425a      	negs	r2, r3
 80009ec:	4153      	adcs	r3, r2
 80009ee:	425b      	negs	r3, r3
 80009f0:	0035      	movs	r5, r6
 80009f2:	2200      	movs	r2, #0
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	e773      	b.n	80008e0 <__aeabi_fdiv+0x104>
 80009f8:	0192      	lsls	r2, r2, #6
 80009fa:	2000      	movs	r0, #0
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	e76f      	b.n	80008e0 <__aeabi_fdiv+0x104>
 8000a00:	431a      	orrs	r2, r3
 8000a02:	0252      	lsls	r2, r2, #9
 8000a04:	0035      	movs	r5, r6
 8000a06:	20ff      	movs	r0, #255	@ 0xff
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e769      	b.n	80008e0 <__aeabi_fdiv+0x104>
 8000a0c:	4644      	mov	r4, r8
 8000a0e:	e7ad      	b.n	800096c <__aeabi_fdiv+0x190>
 8000a10:	08004438 	.word	0x08004438
 8000a14:	08004478 	.word	0x08004478
 8000a18:	f7ffffff 	.word	0xf7ffffff

08000a1c <__eqsf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	024e      	lsls	r6, r1, #9
 8000a22:	004c      	lsls	r4, r1, #1
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc9      	lsrs	r1, r1, #31
 8000a32:	2aff      	cmp	r2, #255	@ 0xff
 8000a34:	d010      	beq.n	8000a58 <__eqsf2+0x3c>
 8000a36:	2cff      	cmp	r4, #255	@ 0xff
 8000a38:	d00c      	beq.n	8000a54 <__eqsf2+0x38>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	42a2      	cmp	r2, r4
 8000a3e:	d10a      	bne.n	8000a56 <__eqsf2+0x3a>
 8000a40:	42b5      	cmp	r5, r6
 8000a42:	d108      	bne.n	8000a56 <__eqsf2+0x3a>
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d00f      	beq.n	8000a68 <__eqsf2+0x4c>
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d104      	bne.n	8000a56 <__eqsf2+0x3a>
 8000a4c:	0028      	movs	r0, r5
 8000a4e:	1e43      	subs	r3, r0, #1
 8000a50:	4198      	sbcs	r0, r3
 8000a52:	e000      	b.n	8000a56 <__eqsf2+0x3a>
 8000a54:	2001      	movs	r0, #1
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	2cff      	cmp	r4, #255	@ 0xff
 8000a5c:	d1fb      	bne.n	8000a56 <__eqsf2+0x3a>
 8000a5e:	4335      	orrs	r5, r6
 8000a60:	d1f9      	bne.n	8000a56 <__eqsf2+0x3a>
 8000a62:	404b      	eors	r3, r1
 8000a64:	0018      	movs	r0, r3
 8000a66:	e7f6      	b.n	8000a56 <__eqsf2+0x3a>
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e7f4      	b.n	8000a56 <__eqsf2+0x3a>

08000a6c <__gesf2>:
 8000a6c:	b530      	push	{r4, r5, lr}
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0244      	lsls	r4, r0, #9
 8000a72:	024d      	lsls	r5, r1, #9
 8000a74:	0fc3      	lsrs	r3, r0, #31
 8000a76:	0048      	lsls	r0, r1, #1
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	0a6d      	lsrs	r5, r5, #9
 8000a7e:	0e00      	lsrs	r0, r0, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	2aff      	cmp	r2, #255	@ 0xff
 8000a84:	d019      	beq.n	8000aba <__gesf2+0x4e>
 8000a86:	28ff      	cmp	r0, #255	@ 0xff
 8000a88:	d00b      	beq.n	8000aa2 <__gesf2+0x36>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d11e      	bne.n	8000acc <__gesf2+0x60>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d10b      	bne.n	8000aaa <__gesf2+0x3e>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d027      	beq.n	8000ae6 <__gesf2+0x7a>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d134      	bne.n	8000b04 <__gesf2+0x98>
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	d02f      	beq.n	8000afe <__gesf2+0x92>
 8000a9e:	0008      	movs	r0, r1
 8000aa0:	bd30      	pop	{r4, r5, pc}
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d128      	bne.n	8000af8 <__gesf2+0x8c>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d101      	bne.n	8000aae <__gesf2+0x42>
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d0f5      	beq.n	8000a9a <__gesf2+0x2e>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d107      	bne.n	8000ac2 <__gesf2+0x56>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d023      	beq.n	8000afe <__gesf2+0x92>
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	e7f2      	b.n	8000aa0 <__gesf2+0x34>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d11c      	bne.n	8000af8 <__gesf2+0x8c>
 8000abe:	28ff      	cmp	r0, #255	@ 0xff
 8000ac0:	d014      	beq.n	8000aec <__gesf2+0x80>
 8000ac2:	1e58      	subs	r0, r3, #1
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	4018      	ands	r0, r3
 8000ac8:	3801      	subs	r0, #1
 8000aca:	e7e9      	b.n	8000aa0 <__gesf2+0x34>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d0f8      	beq.n	8000ac2 <__gesf2+0x56>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d1f6      	bne.n	8000ac2 <__gesf2+0x56>
 8000ad4:	4282      	cmp	r2, r0
 8000ad6:	dcf4      	bgt.n	8000ac2 <__gesf2+0x56>
 8000ad8:	dbeb      	blt.n	8000ab2 <__gesf2+0x46>
 8000ada:	42ac      	cmp	r4, r5
 8000adc:	d8f1      	bhi.n	8000ac2 <__gesf2+0x56>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	42ac      	cmp	r4, r5
 8000ae2:	d2dd      	bcs.n	8000aa0 <__gesf2+0x34>
 8000ae4:	e7e5      	b.n	8000ab2 <__gesf2+0x46>
 8000ae6:	2c00      	cmp	r4, #0
 8000ae8:	d0da      	beq.n	8000aa0 <__gesf2+0x34>
 8000aea:	e7ea      	b.n	8000ac2 <__gesf2+0x56>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d103      	bne.n	8000af8 <__gesf2+0x8c>
 8000af0:	428b      	cmp	r3, r1
 8000af2:	d1e6      	bne.n	8000ac2 <__gesf2+0x56>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7d3      	b.n	8000aa0 <__gesf2+0x34>
 8000af8:	2002      	movs	r0, #2
 8000afa:	4240      	negs	r0, r0
 8000afc:	e7d0      	b.n	8000aa0 <__gesf2+0x34>
 8000afe:	2001      	movs	r0, #1
 8000b00:	4240      	negs	r0, r0
 8000b02:	e7cd      	b.n	8000aa0 <__gesf2+0x34>
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d0e8      	beq.n	8000ada <__gesf2+0x6e>
 8000b08:	e7db      	b.n	8000ac2 <__gesf2+0x56>
 8000b0a:	46c0      	nop			@ (mov r8, r8)

08000b0c <__lesf2>:
 8000b0c:	b530      	push	{r4, r5, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0244      	lsls	r4, r0, #9
 8000b12:	024d      	lsls	r5, r1, #9
 8000b14:	0fc3      	lsrs	r3, r0, #31
 8000b16:	0048      	lsls	r0, r1, #1
 8000b18:	0a64      	lsrs	r4, r4, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e00      	lsrs	r0, r0, #24
 8000b20:	0fc9      	lsrs	r1, r1, #31
 8000b22:	2aff      	cmp	r2, #255	@ 0xff
 8000b24:	d01a      	beq.n	8000b5c <__lesf2+0x50>
 8000b26:	28ff      	cmp	r0, #255	@ 0xff
 8000b28:	d00e      	beq.n	8000b48 <__lesf2+0x3c>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d11e      	bne.n	8000b6c <__lesf2+0x60>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d10e      	bne.n	8000b50 <__lesf2+0x44>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d02a      	beq.n	8000b8c <__lesf2+0x80>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d00c      	beq.n	8000b54 <__lesf2+0x48>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d01d      	beq.n	8000b7a <__lesf2+0x6e>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	2302      	movs	r3, #2
 8000b42:	4018      	ands	r0, r3
 8000b44:	3801      	subs	r0, #1
 8000b46:	e010      	b.n	8000b6a <__lesf2+0x5e>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d10d      	bne.n	8000b68 <__lesf2+0x5c>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d120      	bne.n	8000b92 <__lesf2+0x86>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d11e      	bne.n	8000b92 <__lesf2+0x86>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d023      	beq.n	8000ba0 <__lesf2+0x94>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e006      	b.n	8000b6a <__lesf2+0x5e>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d103      	bne.n	8000b68 <__lesf2+0x5c>
 8000b60:	28ff      	cmp	r0, #255	@ 0xff
 8000b62:	d1ec      	bne.n	8000b3e <__lesf2+0x32>
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d017      	beq.n	8000b98 <__lesf2+0x8c>
 8000b68:	2002      	movs	r0, #2
 8000b6a:	bd30      	pop	{r4, r5, pc}
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d0e6      	beq.n	8000b3e <__lesf2+0x32>
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d1e4      	bne.n	8000b3e <__lesf2+0x32>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	dce2      	bgt.n	8000b3e <__lesf2+0x32>
 8000b78:	db04      	blt.n	8000b84 <__lesf2+0x78>
 8000b7a:	42ac      	cmp	r4, r5
 8000b7c:	d8df      	bhi.n	8000b3e <__lesf2+0x32>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	42ac      	cmp	r4, r5
 8000b82:	d2f2      	bcs.n	8000b6a <__lesf2+0x5e>
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <__lesf2+0x94>
 8000b88:	0018      	movs	r0, r3
 8000b8a:	e7ee      	b.n	8000b6a <__lesf2+0x5e>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d0ec      	beq.n	8000b6a <__lesf2+0x5e>
 8000b90:	e7d5      	b.n	8000b3e <__lesf2+0x32>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d1d3      	bne.n	8000b3e <__lesf2+0x32>
 8000b96:	e7f5      	b.n	8000b84 <__lesf2+0x78>
 8000b98:	2000      	movs	r0, #0
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d0e5      	beq.n	8000b6a <__lesf2+0x5e>
 8000b9e:	e7ce      	b.n	8000b3e <__lesf2+0x32>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	e7e1      	b.n	8000b6a <__lesf2+0x5e>
 8000ba6:	46c0      	nop			@ (mov r8, r8)

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000baa:	464f      	mov	r7, r9
 8000bac:	4646      	mov	r6, r8
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	0243      	lsls	r3, r0, #9
 8000bb2:	0a5b      	lsrs	r3, r3, #9
 8000bb4:	0045      	lsls	r5, r0, #1
 8000bb6:	b5c0      	push	{r6, r7, lr}
 8000bb8:	4699      	mov	r9, r3
 8000bba:	1c0f      	adds	r7, r1, #0
 8000bbc:	0e2d      	lsrs	r5, r5, #24
 8000bbe:	0fc6      	lsrs	r6, r0, #31
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fmul+0x1e>
 8000bc4:	e088      	b.n	8000cd8 <__aeabi_fmul+0x130>
 8000bc6:	2dff      	cmp	r5, #255	@ 0xff
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fmul+0x24>
 8000bca:	e08d      	b.n	8000ce8 <__aeabi_fmul+0x140>
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	04d2      	lsls	r2, r2, #19
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4691      	mov	r9, r2
 8000bd8:	4698      	mov	r8, r3
 8000bda:	469a      	mov	sl, r3
 8000bdc:	3d7f      	subs	r5, #127	@ 0x7f
 8000bde:	027c      	lsls	r4, r7, #9
 8000be0:	007b      	lsls	r3, r7, #1
 8000be2:	0a64      	lsrs	r4, r4, #9
 8000be4:	0e1b      	lsrs	r3, r3, #24
 8000be6:	0fff      	lsrs	r7, r7, #31
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d068      	beq.n	8000cbe <__aeabi_fmul+0x116>
 8000bec:	2bff      	cmp	r3, #255	@ 0xff
 8000bee:	d021      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	00e4      	lsls	r4, r4, #3
 8000bf4:	04d2      	lsls	r2, r2, #19
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	3b7f      	subs	r3, #127	@ 0x7f
 8000bfc:	195b      	adds	r3, r3, r5
 8000bfe:	2100      	movs	r1, #0
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2a0a      	cmp	r2, #10
 8000c04:	dc2e      	bgt.n	8000c64 <__aeabi_fmul+0xbc>
 8000c06:	407e      	eors	r6, r7
 8000c08:	4642      	mov	r2, r8
 8000c0a:	2a02      	cmp	r2, #2
 8000c0c:	dc23      	bgt.n	8000c56 <__aeabi_fmul+0xae>
 8000c0e:	3a01      	subs	r2, #1
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d900      	bls.n	8000c16 <__aeabi_fmul+0x6e>
 8000c14:	e0bd      	b.n	8000d92 <__aeabi_fmul+0x1ea>
 8000c16:	2902      	cmp	r1, #2
 8000c18:	d06e      	beq.n	8000cf8 <__aeabi_fmul+0x150>
 8000c1a:	2901      	cmp	r1, #1
 8000c1c:	d12c      	bne.n	8000c78 <__aeabi_fmul+0xd0>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	2200      	movs	r2, #0
 8000c22:	05c0      	lsls	r0, r0, #23
 8000c24:	07f6      	lsls	r6, r6, #31
 8000c26:	4310      	orrs	r0, r2
 8000c28:	4330      	orrs	r0, r6
 8000c2a:	bce0      	pop	{r5, r6, r7}
 8000c2c:	46ba      	mov	sl, r7
 8000c2e:	46b1      	mov	r9, r6
 8000c30:	46a8      	mov	r8, r5
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c34:	002b      	movs	r3, r5
 8000c36:	33ff      	adds	r3, #255	@ 0xff
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d065      	beq.n	8000d08 <__aeabi_fmul+0x160>
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4641      	mov	r1, r8
 8000c40:	4311      	orrs	r1, r2
 8000c42:	0032      	movs	r2, r6
 8000c44:	3501      	adds	r5, #1
 8000c46:	4688      	mov	r8, r1
 8000c48:	407a      	eors	r2, r7
 8000c4a:	35ff      	adds	r5, #255	@ 0xff
 8000c4c:	290a      	cmp	r1, #10
 8000c4e:	dd00      	ble.n	8000c52 <__aeabi_fmul+0xaa>
 8000c50:	e0d8      	b.n	8000e04 <__aeabi_fmul+0x25c>
 8000c52:	0016      	movs	r6, r2
 8000c54:	2103      	movs	r1, #3
 8000c56:	4640      	mov	r0, r8
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4082      	lsls	r2, r0
 8000c5c:	20a6      	movs	r0, #166	@ 0xa6
 8000c5e:	00c0      	lsls	r0, r0, #3
 8000c60:	4202      	tst	r2, r0
 8000c62:	d020      	beq.n	8000ca6 <__aeabi_fmul+0xfe>
 8000c64:	4653      	mov	r3, sl
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d046      	beq.n	8000cf8 <__aeabi_fmul+0x150>
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fmul+0xc8>
 8000c6e:	e0bb      	b.n	8000de8 <__aeabi_fmul+0x240>
 8000c70:	4651      	mov	r1, sl
 8000c72:	464c      	mov	r4, r9
 8000c74:	2901      	cmp	r1, #1
 8000c76:	d0d2      	beq.n	8000c1e <__aeabi_fmul+0x76>
 8000c78:	002b      	movs	r3, r5
 8000c7a:	337f      	adds	r3, #127	@ 0x7f
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	dd70      	ble.n	8000d62 <__aeabi_fmul+0x1ba>
 8000c80:	0762      	lsls	r2, r4, #29
 8000c82:	d004      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c84:	220f      	movs	r2, #15
 8000c86:	4022      	ands	r2, r4
 8000c88:	2a04      	cmp	r2, #4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c8c:	3404      	adds	r4, #4
 8000c8e:	0122      	lsls	r2, r4, #4
 8000c90:	d503      	bpl.n	8000c9a <__aeabi_fmul+0xf2>
 8000c92:	4b63      	ldr	r3, [pc, #396]	@ (8000e20 <__aeabi_fmul+0x278>)
 8000c94:	401c      	ands	r4, r3
 8000c96:	002b      	movs	r3, r5
 8000c98:	3380      	adds	r3, #128	@ 0x80
 8000c9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c9c:	dc2c      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c9e:	01a2      	lsls	r2, r4, #6
 8000ca0:	0a52      	lsrs	r2, r2, #9
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	e7bd      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000ca6:	2090      	movs	r0, #144	@ 0x90
 8000ca8:	0080      	lsls	r0, r0, #2
 8000caa:	4202      	tst	r2, r0
 8000cac:	d127      	bne.n	8000cfe <__aeabi_fmul+0x156>
 8000cae:	38b9      	subs	r0, #185	@ 0xb9
 8000cb0:	38ff      	subs	r0, #255	@ 0xff
 8000cb2:	4210      	tst	r0, r2
 8000cb4:	d06d      	beq.n	8000d92 <__aeabi_fmul+0x1ea>
 8000cb6:	003e      	movs	r6, r7
 8000cb8:	46a1      	mov	r9, r4
 8000cba:	468a      	mov	sl, r1
 8000cbc:	e7d2      	b.n	8000c64 <__aeabi_fmul+0xbc>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d141      	bne.n	8000d46 <__aeabi_fmul+0x19e>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	4690      	mov	r8, r2
 8000cca:	002b      	movs	r3, r5
 8000ccc:	4642      	mov	r2, r8
 8000cce:	2101      	movs	r1, #1
 8000cd0:	1c5d      	adds	r5, r3, #1
 8000cd2:	2a0a      	cmp	r2, #10
 8000cd4:	dd97      	ble.n	8000c06 <__aeabi_fmul+0x5e>
 8000cd6:	e7c5      	b.n	8000c64 <__aeabi_fmul+0xbc>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d126      	bne.n	8000d2a <__aeabi_fmul+0x182>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	e77a      	b.n	8000bde <__aeabi_fmul+0x36>
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d118      	bne.n	8000d1e <__aeabi_fmul+0x176>
 8000cec:	2308      	movs	r3, #8
 8000cee:	4698      	mov	r8, r3
 8000cf0:	3b06      	subs	r3, #6
 8000cf2:	25ff      	movs	r5, #255	@ 0xff
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	e772      	b.n	8000bde <__aeabi_fmul+0x36>
 8000cf8:	20ff      	movs	r0, #255	@ 0xff
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	e791      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	2600      	movs	r6, #0
 8000d02:	20ff      	movs	r0, #255	@ 0xff
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	e78c      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000d08:	4641      	mov	r1, r8
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	3501      	adds	r5, #1
 8000d0e:	4311      	orrs	r1, r2
 8000d10:	4688      	mov	r8, r1
 8000d12:	35ff      	adds	r5, #255	@ 0xff
 8000d14:	290a      	cmp	r1, #10
 8000d16:	dca5      	bgt.n	8000c64 <__aeabi_fmul+0xbc>
 8000d18:	2102      	movs	r1, #2
 8000d1a:	407e      	eors	r6, r7
 8000d1c:	e774      	b.n	8000c08 <__aeabi_fmul+0x60>
 8000d1e:	230c      	movs	r3, #12
 8000d20:	4698      	mov	r8, r3
 8000d22:	3b09      	subs	r3, #9
 8000d24:	25ff      	movs	r5, #255	@ 0xff
 8000d26:	469a      	mov	sl, r3
 8000d28:	e759      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fa60 	bl	80011f0 <__clzsi2>
 8000d30:	464a      	mov	r2, r9
 8000d32:	1f43      	subs	r3, r0, #5
 8000d34:	2576      	movs	r5, #118	@ 0x76
 8000d36:	409a      	lsls	r2, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	4691      	mov	r9, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	469a      	mov	sl, r3
 8000d42:	1a2d      	subs	r5, r5, r0
 8000d44:	e74b      	b.n	8000bde <__aeabi_fmul+0x36>
 8000d46:	0020      	movs	r0, r4
 8000d48:	f000 fa52 	bl	80011f0 <__clzsi2>
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	1f43      	subs	r3, r0, #5
 8000d50:	409c      	lsls	r4, r3
 8000d52:	1a2b      	subs	r3, r5, r0
 8000d54:	3b76      	subs	r3, #118	@ 0x76
 8000d56:	2100      	movs	r1, #0
 8000d58:	1c5d      	adds	r5, r3, #1
 8000d5a:	2a0a      	cmp	r2, #10
 8000d5c:	dc00      	bgt.n	8000d60 <__aeabi_fmul+0x1b8>
 8000d5e:	e752      	b.n	8000c06 <__aeabi_fmul+0x5e>
 8000d60:	e780      	b.n	8000c64 <__aeabi_fmul+0xbc>
 8000d62:	2201      	movs	r2, #1
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b1b      	cmp	r3, #27
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_fmul+0x1c4>
 8000d6a:	e758      	b.n	8000c1e <__aeabi_fmul+0x76>
 8000d6c:	359e      	adds	r5, #158	@ 0x9e
 8000d6e:	0022      	movs	r2, r4
 8000d70:	40ac      	lsls	r4, r5
 8000d72:	40da      	lsrs	r2, r3
 8000d74:	1e63      	subs	r3, r4, #1
 8000d76:	419c      	sbcs	r4, r3
 8000d78:	4322      	orrs	r2, r4
 8000d7a:	0753      	lsls	r3, r2, #29
 8000d7c:	d004      	beq.n	8000d88 <__aeabi_fmul+0x1e0>
 8000d7e:	230f      	movs	r3, #15
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fmul+0x1e0>
 8000d86:	3204      	adds	r2, #4
 8000d88:	0153      	lsls	r3, r2, #5
 8000d8a:	d537      	bpl.n	8000dfc <__aeabi_fmul+0x254>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	e747      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000d92:	0c21      	lsrs	r1, r4, #16
 8000d94:	464a      	mov	r2, r9
 8000d96:	0424      	lsls	r4, r4, #16
 8000d98:	0c24      	lsrs	r4, r4, #16
 8000d9a:	0027      	movs	r7, r4
 8000d9c:	0c10      	lsrs	r0, r2, #16
 8000d9e:	0412      	lsls	r2, r2, #16
 8000da0:	0c12      	lsrs	r2, r2, #16
 8000da2:	4344      	muls	r4, r0
 8000da4:	4357      	muls	r7, r2
 8000da6:	4348      	muls	r0, r1
 8000da8:	4351      	muls	r1, r2
 8000daa:	0c3a      	lsrs	r2, r7, #16
 8000dac:	1909      	adds	r1, r1, r4
 8000dae:	1852      	adds	r2, r2, r1
 8000db0:	4294      	cmp	r4, r2
 8000db2:	d903      	bls.n	8000dbc <__aeabi_fmul+0x214>
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	0249      	lsls	r1, r1, #9
 8000db8:	468c      	mov	ip, r1
 8000dba:	4460      	add	r0, ip
 8000dbc:	043f      	lsls	r7, r7, #16
 8000dbe:	0411      	lsls	r1, r2, #16
 8000dc0:	0c3f      	lsrs	r7, r7, #16
 8000dc2:	19c9      	adds	r1, r1, r7
 8000dc4:	018c      	lsls	r4, r1, #6
 8000dc6:	1e67      	subs	r7, r4, #1
 8000dc8:	41bc      	sbcs	r4, r7
 8000dca:	0c12      	lsrs	r2, r2, #16
 8000dcc:	0e89      	lsrs	r1, r1, #26
 8000dce:	1812      	adds	r2, r2, r0
 8000dd0:	430c      	orrs	r4, r1
 8000dd2:	0192      	lsls	r2, r2, #6
 8000dd4:	4314      	orrs	r4, r2
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	d50e      	bpl.n	8000df8 <__aeabi_fmul+0x250>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	0862      	lsrs	r2, r4, #1
 8000dde:	401c      	ands	r4, r3
 8000de0:	4314      	orrs	r4, r2
 8000de2:	e749      	b.n	8000c78 <__aeabi_fmul+0xd0>
 8000de4:	003e      	movs	r6, r7
 8000de6:	46a1      	mov	r9, r4
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	464b      	mov	r3, r9
 8000dec:	03d2      	lsls	r2, r2, #15
 8000dee:	431a      	orrs	r2, r3
 8000df0:	0252      	lsls	r2, r2, #9
 8000df2:	20ff      	movs	r0, #255	@ 0xff
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e714      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000df8:	001d      	movs	r5, r3
 8000dfa:	e73d      	b.n	8000c78 <__aeabi_fmul+0xd0>
 8000dfc:	0192      	lsls	r2, r2, #6
 8000dfe:	2000      	movs	r0, #0
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e70e      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000e04:	290f      	cmp	r1, #15
 8000e06:	d1ed      	bne.n	8000de4 <__aeabi_fmul+0x23c>
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	03d2      	lsls	r2, r2, #15
 8000e0e:	4213      	tst	r3, r2
 8000e10:	d0ea      	beq.n	8000de8 <__aeabi_fmul+0x240>
 8000e12:	4214      	tst	r4, r2
 8000e14:	d1e8      	bne.n	8000de8 <__aeabi_fmul+0x240>
 8000e16:	003e      	movs	r6, r7
 8000e18:	20ff      	movs	r0, #255	@ 0xff
 8000e1a:	4322      	orrs	r2, r4
 8000e1c:	e701      	b.n	8000c22 <__aeabi_fmul+0x7a>
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	f7ffffff 	.word	0xf7ffffff

08000e24 <__aeabi_fsub>:
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	4647      	mov	r7, r8
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	024e      	lsls	r6, r1, #9
 8000e2c:	0243      	lsls	r3, r0, #9
 8000e2e:	0045      	lsls	r5, r0, #1
 8000e30:	0a72      	lsrs	r2, r6, #9
 8000e32:	0fc4      	lsrs	r4, r0, #31
 8000e34:	0048      	lsls	r0, r1, #1
 8000e36:	b580      	push	{r7, lr}
 8000e38:	4694      	mov	ip, r2
 8000e3a:	0a5f      	lsrs	r7, r3, #9
 8000e3c:	0e2d      	lsrs	r5, r5, #24
 8000e3e:	099b      	lsrs	r3, r3, #6
 8000e40:	0e00      	lsrs	r0, r0, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	09b6      	lsrs	r6, r6, #6
 8000e46:	28ff      	cmp	r0, #255	@ 0xff
 8000e48:	d024      	beq.n	8000e94 <__aeabi_fsub+0x70>
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4051      	eors	r1, r2
 8000e4e:	1a2a      	subs	r2, r5, r0
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d00f      	beq.n	8000e74 <__aeabi_fsub+0x50>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_fsub+0x36>
 8000e58:	e16a      	b.n	8001130 <__aeabi_fsub+0x30c>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d135      	bne.n	8000eca <__aeabi_fsub+0xa6>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x40>
 8000e62:	e0a2      	b.n	8000faa <__aeabi_fsub+0x186>
 8000e64:	1e51      	subs	r1, r2, #1
 8000e66:	2a01      	cmp	r2, #1
 8000e68:	d100      	bne.n	8000e6c <__aeabi_fsub+0x48>
 8000e6a:	e124      	b.n	80010b6 <__aeabi_fsub+0x292>
 8000e6c:	2aff      	cmp	r2, #255	@ 0xff
 8000e6e:	d021      	beq.n	8000eb4 <__aeabi_fsub+0x90>
 8000e70:	000a      	movs	r2, r1
 8000e72:	e02f      	b.n	8000ed4 <__aeabi_fsub+0xb0>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_fsub+0x56>
 8000e78:	e167      	b.n	800114a <__aeabi_fsub+0x326>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d05e      	beq.n	8000f3c <__aeabi_fsub+0x118>
 8000e7e:	2dff      	cmp	r5, #255	@ 0xff
 8000e80:	d018      	beq.n	8000eb4 <__aeabi_fsub+0x90>
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	04c9      	lsls	r1, r1, #19
 8000e86:	430e      	orrs	r6, r1
 8000e88:	2a1b      	cmp	r2, #27
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_fsub+0x6a>
 8000e8c:	e076      	b.n	8000f7c <__aeabi_fsub+0x158>
 8000e8e:	002a      	movs	r2, r5
 8000e90:	3301      	adds	r3, #1
 8000e92:	e032      	b.n	8000efa <__aeabi_fsub+0xd6>
 8000e94:	002a      	movs	r2, r5
 8000e96:	3aff      	subs	r2, #255	@ 0xff
 8000e98:	4691      	mov	r9, r2
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d042      	beq.n	8000f24 <__aeabi_fsub+0x100>
 8000e9e:	428c      	cmp	r4, r1
 8000ea0:	d055      	beq.n	8000f4e <__aeabi_fsub+0x12a>
 8000ea2:	464a      	mov	r2, r9
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fsub+0x86>
 8000ea8:	e09c      	b.n	8000fe4 <__aeabi_fsub+0x1c0>
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x8c>
 8000eae:	e077      	b.n	8000fa0 <__aeabi_fsub+0x17c>
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	0033      	movs	r3, r6
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x98>
 8000eba:	e06e      	b.n	8000f9a <__aeabi_fsub+0x176>
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	03d2      	lsls	r2, r2, #15
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	20ff      	movs	r0, #255	@ 0xff
 8000ec6:	0a5b      	lsrs	r3, r3, #9
 8000ec8:	e024      	b.n	8000f14 <__aeabi_fsub+0xf0>
 8000eca:	2dff      	cmp	r5, #255	@ 0xff
 8000ecc:	d0f2      	beq.n	8000eb4 <__aeabi_fsub+0x90>
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	04c9      	lsls	r1, r1, #19
 8000ed2:	430e      	orrs	r6, r1
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2a1b      	cmp	r2, #27
 8000ed8:	dc08      	bgt.n	8000eec <__aeabi_fsub+0xc8>
 8000eda:	0031      	movs	r1, r6
 8000edc:	2020      	movs	r0, #32
 8000ede:	40d1      	lsrs	r1, r2
 8000ee0:	1a82      	subs	r2, r0, r2
 8000ee2:	4096      	lsls	r6, r2
 8000ee4:	0032      	movs	r2, r6
 8000ee6:	1e50      	subs	r0, r2, #1
 8000ee8:	4182      	sbcs	r2, r0
 8000eea:	4311      	orrs	r1, r2
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d460      	bmi.n	8000fb4 <__aeabi_fsub+0x190>
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	002a      	movs	r2, r5
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	d057      	beq.n	8000faa <__aeabi_fsub+0x186>
 8000efa:	210f      	movs	r1, #15
 8000efc:	4019      	ands	r1, r3
 8000efe:	2904      	cmp	r1, #4
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0xe0>
 8000f02:	3304      	adds	r3, #4
 8000f04:	0159      	lsls	r1, r3, #5
 8000f06:	d550      	bpl.n	8000faa <__aeabi_fsub+0x186>
 8000f08:	1c50      	adds	r0, r2, #1
 8000f0a:	2afe      	cmp	r2, #254	@ 0xfe
 8000f0c:	d045      	beq.n	8000f9a <__aeabi_fsub+0x176>
 8000f0e:	019b      	lsls	r3, r3, #6
 8000f10:	b2c0      	uxtb	r0, r0
 8000f12:	0a5b      	lsrs	r3, r3, #9
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	4318      	orrs	r0, r3
 8000f18:	07e4      	lsls	r4, r4, #31
 8000f1a:	4320      	orrs	r0, r4
 8000f1c:	bcc0      	pop	{r6, r7}
 8000f1e:	46b9      	mov	r9, r7
 8000f20:	46b0      	mov	r8, r6
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	2201      	movs	r2, #1
 8000f26:	4051      	eors	r1, r2
 8000f28:	428c      	cmp	r4, r1
 8000f2a:	d1ba      	bne.n	8000ea2 <__aeabi_fsub+0x7e>
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d010      	beq.n	8000f54 <__aeabi_fsub+0x130>
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x114>
 8000f36:	e098      	b.n	800106a <__aeabi_fsub+0x246>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e7bb      	b.n	8000eb4 <__aeabi_fsub+0x90>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d034      	beq.n	8000faa <__aeabi_fsub+0x186>
 8000f40:	1e51      	subs	r1, r2, #1
 8000f42:	2a01      	cmp	r2, #1
 8000f44:	d06e      	beq.n	8001024 <__aeabi_fsub+0x200>
 8000f46:	2aff      	cmp	r2, #255	@ 0xff
 8000f48:	d0b4      	beq.n	8000eb4 <__aeabi_fsub+0x90>
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	e79c      	b.n	8000e88 <__aeabi_fsub+0x64>
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d000      	beq.n	8000f54 <__aeabi_fsub+0x130>
 8000f52:	e088      	b.n	8001066 <__aeabi_fsub+0x242>
 8000f54:	20fe      	movs	r0, #254	@ 0xfe
 8000f56:	1c6a      	adds	r2, r5, #1
 8000f58:	4210      	tst	r0, r2
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0x13a>
 8000f5c:	e092      	b.n	8001084 <__aeabi_fsub+0x260>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x140>
 8000f62:	e0a4      	b.n	80010ae <__aeabi_fsub+0x28a>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x146>
 8000f68:	e0cb      	b.n	8001102 <__aeabi_fsub+0x2de>
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fsub+0x14c>
 8000f6e:	e0ca      	b.n	8001106 <__aeabi_fsub+0x2e2>
 8000f70:	2200      	movs	r2, #0
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	0a5b      	lsrs	r3, r3, #9
 8000f78:	b2d0      	uxtb	r0, r2
 8000f7a:	e7cb      	b.n	8000f14 <__aeabi_fsub+0xf0>
 8000f7c:	0031      	movs	r1, r6
 8000f7e:	2020      	movs	r0, #32
 8000f80:	40d1      	lsrs	r1, r2
 8000f82:	1a82      	subs	r2, r0, r2
 8000f84:	4096      	lsls	r6, r2
 8000f86:	0032      	movs	r2, r6
 8000f88:	1e50      	subs	r0, r2, #1
 8000f8a:	4182      	sbcs	r2, r0
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	015a      	lsls	r2, r3, #5
 8000f92:	d5ae      	bpl.n	8000ef2 <__aeabi_fsub+0xce>
 8000f94:	1c6a      	adds	r2, r5, #1
 8000f96:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f98:	d14a      	bne.n	8001030 <__aeabi_fsub+0x20c>
 8000f9a:	20ff      	movs	r0, #255	@ 0xff
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e7b9      	b.n	8000f14 <__aeabi_fsub+0xf0>
 8000fa0:	22ff      	movs	r2, #255	@ 0xff
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d14b      	bne.n	800103e <__aeabi_fsub+0x21a>
 8000fa6:	000c      	movs	r4, r1
 8000fa8:	0033      	movs	r3, r6
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	2aff      	cmp	r2, #255	@ 0xff
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x18e>
 8000fb0:	e781      	b.n	8000eb6 <__aeabi_fsub+0x92>
 8000fb2:	e7df      	b.n	8000f74 <__aeabi_fsub+0x150>
 8000fb4:	019f      	lsls	r7, r3, #6
 8000fb6:	09bf      	lsrs	r7, r7, #6
 8000fb8:	0038      	movs	r0, r7
 8000fba:	f000 f919 	bl	80011f0 <__clzsi2>
 8000fbe:	3805      	subs	r0, #5
 8000fc0:	4087      	lsls	r7, r0
 8000fc2:	4285      	cmp	r5, r0
 8000fc4:	dc21      	bgt.n	800100a <__aeabi_fsub+0x1e6>
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2120      	movs	r1, #32
 8000fca:	1b42      	subs	r2, r0, r5
 8000fcc:	3201      	adds	r2, #1
 8000fce:	40d3      	lsrs	r3, r2
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	4097      	lsls	r7, r2
 8000fd4:	1e7a      	subs	r2, r7, #1
 8000fd6:	4197      	sbcs	r7, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	433b      	orrs	r3, r7
 8000fdc:	0759      	lsls	r1, r3, #29
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0x1be>
 8000fe0:	e78b      	b.n	8000efa <__aeabi_fsub+0xd6>
 8000fe2:	e78f      	b.n	8000f04 <__aeabi_fsub+0xe0>
 8000fe4:	20fe      	movs	r0, #254	@ 0xfe
 8000fe6:	1c6a      	adds	r2, r5, #1
 8000fe8:	4210      	tst	r0, r2
 8000fea:	d112      	bne.n	8001012 <__aeabi_fsub+0x1ee>
 8000fec:	2d00      	cmp	r5, #0
 8000fee:	d152      	bne.n	8001096 <__aeabi_fsub+0x272>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d07c      	beq.n	80010ee <__aeabi_fsub+0x2ca>
 8000ff4:	2e00      	cmp	r6, #0
 8000ff6:	d0bb      	beq.n	8000f70 <__aeabi_fsub+0x14c>
 8000ff8:	1b9a      	subs	r2, r3, r6
 8000ffa:	0150      	lsls	r0, r2, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x1dc>
 8000ffe:	e08b      	b.n	8001118 <__aeabi_fsub+0x2f4>
 8001000:	2401      	movs	r4, #1
 8001002:	2200      	movs	r2, #0
 8001004:	1af3      	subs	r3, r6, r3
 8001006:	400c      	ands	r4, r1
 8001008:	e7e8      	b.n	8000fdc <__aeabi_fsub+0x1b8>
 800100a:	4b56      	ldr	r3, [pc, #344]	@ (8001164 <__aeabi_fsub+0x340>)
 800100c:	1a2a      	subs	r2, r5, r0
 800100e:	403b      	ands	r3, r7
 8001010:	e7e4      	b.n	8000fdc <__aeabi_fsub+0x1b8>
 8001012:	1b9f      	subs	r7, r3, r6
 8001014:	017a      	lsls	r2, r7, #5
 8001016:	d446      	bmi.n	80010a6 <__aeabi_fsub+0x282>
 8001018:	2f00      	cmp	r7, #0
 800101a:	d1cd      	bne.n	8000fb8 <__aeabi_fsub+0x194>
 800101c:	2400      	movs	r4, #0
 800101e:	2000      	movs	r0, #0
 8001020:	2300      	movs	r3, #0
 8001022:	e777      	b.n	8000f14 <__aeabi_fsub+0xf0>
 8001024:	199b      	adds	r3, r3, r6
 8001026:	2501      	movs	r5, #1
 8001028:	3201      	adds	r2, #1
 800102a:	0159      	lsls	r1, r3, #5
 800102c:	d400      	bmi.n	8001030 <__aeabi_fsub+0x20c>
 800102e:	e760      	b.n	8000ef2 <__aeabi_fsub+0xce>
 8001030:	2101      	movs	r1, #1
 8001032:	484d      	ldr	r0, [pc, #308]	@ (8001168 <__aeabi_fsub+0x344>)
 8001034:	4019      	ands	r1, r3
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	4003      	ands	r3, r0
 800103a:	430b      	orrs	r3, r1
 800103c:	e7ce      	b.n	8000fdc <__aeabi_fsub+0x1b8>
 800103e:	1e57      	subs	r7, r2, #1
 8001040:	2a01      	cmp	r2, #1
 8001042:	d05a      	beq.n	80010fa <__aeabi_fsub+0x2d6>
 8001044:	000c      	movs	r4, r1
 8001046:	2aff      	cmp	r2, #255	@ 0xff
 8001048:	d033      	beq.n	80010b2 <__aeabi_fsub+0x28e>
 800104a:	2201      	movs	r2, #1
 800104c:	2f1b      	cmp	r7, #27
 800104e:	dc07      	bgt.n	8001060 <__aeabi_fsub+0x23c>
 8001050:	2120      	movs	r1, #32
 8001052:	1bc9      	subs	r1, r1, r7
 8001054:	001a      	movs	r2, r3
 8001056:	408b      	lsls	r3, r1
 8001058:	40fa      	lsrs	r2, r7
 800105a:	1e59      	subs	r1, r3, #1
 800105c:	418b      	sbcs	r3, r1
 800105e:	431a      	orrs	r2, r3
 8001060:	0005      	movs	r5, r0
 8001062:	1ab3      	subs	r3, r6, r2
 8001064:	e743      	b.n	8000eee <__aeabi_fsub+0xca>
 8001066:	2d00      	cmp	r5, #0
 8001068:	d123      	bne.n	80010b2 <__aeabi_fsub+0x28e>
 800106a:	22ff      	movs	r2, #255	@ 0xff
 800106c:	2b00      	cmp	r3, #0
 800106e:	d09b      	beq.n	8000fa8 <__aeabi_fsub+0x184>
 8001070:	1e51      	subs	r1, r2, #1
 8001072:	2a01      	cmp	r2, #1
 8001074:	d0d6      	beq.n	8001024 <__aeabi_fsub+0x200>
 8001076:	2aff      	cmp	r2, #255	@ 0xff
 8001078:	d01b      	beq.n	80010b2 <__aeabi_fsub+0x28e>
 800107a:	291b      	cmp	r1, #27
 800107c:	dd2c      	ble.n	80010d8 <__aeabi_fsub+0x2b4>
 800107e:	0002      	movs	r2, r0
 8001080:	1c73      	adds	r3, r6, #1
 8001082:	e73a      	b.n	8000efa <__aeabi_fsub+0xd6>
 8001084:	2aff      	cmp	r2, #255	@ 0xff
 8001086:	d088      	beq.n	8000f9a <__aeabi_fsub+0x176>
 8001088:	199b      	adds	r3, r3, r6
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	0759      	lsls	r1, r3, #29
 800108e:	d000      	beq.n	8001092 <__aeabi_fsub+0x26e>
 8001090:	e733      	b.n	8000efa <__aeabi_fsub+0xd6>
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	e76e      	b.n	8000f74 <__aeabi_fsub+0x150>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d110      	bne.n	80010bc <__aeabi_fsub+0x298>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d043      	beq.n	8001126 <__aeabi_fsub+0x302>
 800109e:	2401      	movs	r4, #1
 80010a0:	0033      	movs	r3, r6
 80010a2:	400c      	ands	r4, r1
 80010a4:	e706      	b.n	8000eb4 <__aeabi_fsub+0x90>
 80010a6:	2401      	movs	r4, #1
 80010a8:	1af7      	subs	r7, r6, r3
 80010aa:	400c      	ands	r4, r1
 80010ac:	e784      	b.n	8000fb8 <__aeabi_fsub+0x194>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <__aeabi_fsub+0x298>
 80010b2:	0033      	movs	r3, r6
 80010b4:	e6fe      	b.n	8000eb4 <__aeabi_fsub+0x90>
 80010b6:	2501      	movs	r5, #1
 80010b8:	1b9b      	subs	r3, r3, r6
 80010ba:	e718      	b.n	8000eee <__aeabi_fsub+0xca>
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x29e>
 80010c0:	e6f8      	b.n	8000eb4 <__aeabi_fsub+0x90>
 80010c2:	2280      	movs	r2, #128	@ 0x80
 80010c4:	03d2      	lsls	r2, r2, #15
 80010c6:	4297      	cmp	r7, r2
 80010c8:	d304      	bcc.n	80010d4 <__aeabi_fsub+0x2b0>
 80010ca:	4594      	cmp	ip, r2
 80010cc:	d202      	bcs.n	80010d4 <__aeabi_fsub+0x2b0>
 80010ce:	2401      	movs	r4, #1
 80010d0:	0033      	movs	r3, r6
 80010d2:	400c      	ands	r4, r1
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	e6f1      	b.n	8000ebc <__aeabi_fsub+0x98>
 80010d8:	001a      	movs	r2, r3
 80010da:	2520      	movs	r5, #32
 80010dc:	40ca      	lsrs	r2, r1
 80010de:	1a69      	subs	r1, r5, r1
 80010e0:	408b      	lsls	r3, r1
 80010e2:	1e59      	subs	r1, r3, #1
 80010e4:	418b      	sbcs	r3, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	0005      	movs	r5, r0
 80010ea:	199b      	adds	r3, r3, r6
 80010ec:	e750      	b.n	8000f90 <__aeabi_fsub+0x16c>
 80010ee:	2e00      	cmp	r6, #0
 80010f0:	d094      	beq.n	800101c <__aeabi_fsub+0x1f8>
 80010f2:	2401      	movs	r4, #1
 80010f4:	0033      	movs	r3, r6
 80010f6:	400c      	ands	r4, r1
 80010f8:	e73a      	b.n	8000f70 <__aeabi_fsub+0x14c>
 80010fa:	000c      	movs	r4, r1
 80010fc:	2501      	movs	r5, #1
 80010fe:	1af3      	subs	r3, r6, r3
 8001100:	e6f5      	b.n	8000eee <__aeabi_fsub+0xca>
 8001102:	0033      	movs	r3, r6
 8001104:	e734      	b.n	8000f70 <__aeabi_fsub+0x14c>
 8001106:	199b      	adds	r3, r3, r6
 8001108:	2200      	movs	r2, #0
 800110a:	0159      	lsls	r1, r3, #5
 800110c:	d5c1      	bpl.n	8001092 <__aeabi_fsub+0x26e>
 800110e:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <__aeabi_fsub+0x340>)
 8001110:	4013      	ands	r3, r2
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	2201      	movs	r2, #1
 8001116:	e72d      	b.n	8000f74 <__aeabi_fsub+0x150>
 8001118:	2a00      	cmp	r2, #0
 800111a:	d100      	bne.n	800111e <__aeabi_fsub+0x2fa>
 800111c:	e77e      	b.n	800101c <__aeabi_fsub+0x1f8>
 800111e:	0013      	movs	r3, r2
 8001120:	2200      	movs	r2, #0
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	e726      	b.n	8000f74 <__aeabi_fsub+0x150>
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	2400      	movs	r4, #0
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	03db      	lsls	r3, r3, #15
 800112e:	e6f1      	b.n	8000f14 <__aeabi_fsub+0xf0>
 8001130:	2a00      	cmp	r2, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x312>
 8001134:	e756      	b.n	8000fe4 <__aeabi_fsub+0x1c0>
 8001136:	1b47      	subs	r7, r0, r5
 8001138:	003a      	movs	r2, r7
 800113a:	2d00      	cmp	r5, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x31c>
 800113e:	e730      	b.n	8000fa2 <__aeabi_fsub+0x17e>
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	04d2      	lsls	r2, r2, #19
 8001144:	000c      	movs	r4, r1
 8001146:	4313      	orrs	r3, r2
 8001148:	e77f      	b.n	800104a <__aeabi_fsub+0x226>
 800114a:	2a00      	cmp	r2, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0x32c>
 800114e:	e701      	b.n	8000f54 <__aeabi_fsub+0x130>
 8001150:	1b41      	subs	r1, r0, r5
 8001152:	2d00      	cmp	r5, #0
 8001154:	d101      	bne.n	800115a <__aeabi_fsub+0x336>
 8001156:	000a      	movs	r2, r1
 8001158:	e788      	b.n	800106c <__aeabi_fsub+0x248>
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	04d2      	lsls	r2, r2, #19
 800115e:	4313      	orrs	r3, r2
 8001160:	e78b      	b.n	800107a <__aeabi_fsub+0x256>
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	fbffffff 	.word	0xfbffffff
 8001168:	7dffffff 	.word	0x7dffffff

0800116c <__aeabi_ui2f>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	1e04      	subs	r4, r0, #0
 8001170:	d00e      	beq.n	8001190 <__aeabi_ui2f+0x24>
 8001172:	f000 f83d 	bl	80011f0 <__clzsi2>
 8001176:	239e      	movs	r3, #158	@ 0x9e
 8001178:	0001      	movs	r1, r0
 800117a:	1a1b      	subs	r3, r3, r0
 800117c:	2b96      	cmp	r3, #150	@ 0x96
 800117e:	dc0c      	bgt.n	800119a <__aeabi_ui2f+0x2e>
 8001180:	2808      	cmp	r0, #8
 8001182:	d02f      	beq.n	80011e4 <__aeabi_ui2f+0x78>
 8001184:	3908      	subs	r1, #8
 8001186:	408c      	lsls	r4, r1
 8001188:	0264      	lsls	r4, r4, #9
 800118a:	0a64      	lsrs	r4, r4, #9
 800118c:	b2d8      	uxtb	r0, r3
 800118e:	e001      	b.n	8001194 <__aeabi_ui2f+0x28>
 8001190:	2000      	movs	r0, #0
 8001192:	2400      	movs	r4, #0
 8001194:	05c0      	lsls	r0, r0, #23
 8001196:	4320      	orrs	r0, r4
 8001198:	bd70      	pop	{r4, r5, r6, pc}
 800119a:	2b99      	cmp	r3, #153	@ 0x99
 800119c:	dc16      	bgt.n	80011cc <__aeabi_ui2f+0x60>
 800119e:	1f42      	subs	r2, r0, #5
 80011a0:	2805      	cmp	r0, #5
 80011a2:	d000      	beq.n	80011a6 <__aeabi_ui2f+0x3a>
 80011a4:	4094      	lsls	r4, r2
 80011a6:	0022      	movs	r2, r4
 80011a8:	4810      	ldr	r0, [pc, #64]	@ (80011ec <__aeabi_ui2f+0x80>)
 80011aa:	4002      	ands	r2, r0
 80011ac:	0765      	lsls	r5, r4, #29
 80011ae:	d009      	beq.n	80011c4 <__aeabi_ui2f+0x58>
 80011b0:	250f      	movs	r5, #15
 80011b2:	402c      	ands	r4, r5
 80011b4:	2c04      	cmp	r4, #4
 80011b6:	d005      	beq.n	80011c4 <__aeabi_ui2f+0x58>
 80011b8:	3204      	adds	r2, #4
 80011ba:	0154      	lsls	r4, r2, #5
 80011bc:	d502      	bpl.n	80011c4 <__aeabi_ui2f+0x58>
 80011be:	239f      	movs	r3, #159	@ 0x9f
 80011c0:	4002      	ands	r2, r0
 80011c2:	1a5b      	subs	r3, r3, r1
 80011c4:	0192      	lsls	r2, r2, #6
 80011c6:	0a54      	lsrs	r4, r2, #9
 80011c8:	b2d8      	uxtb	r0, r3
 80011ca:	e7e3      	b.n	8001194 <__aeabi_ui2f+0x28>
 80011cc:	0002      	movs	r2, r0
 80011ce:	0020      	movs	r0, r4
 80011d0:	321b      	adds	r2, #27
 80011d2:	4090      	lsls	r0, r2
 80011d4:	0002      	movs	r2, r0
 80011d6:	1e50      	subs	r0, r2, #1
 80011d8:	4182      	sbcs	r2, r0
 80011da:	2005      	movs	r0, #5
 80011dc:	1a40      	subs	r0, r0, r1
 80011de:	40c4      	lsrs	r4, r0
 80011e0:	4314      	orrs	r4, r2
 80011e2:	e7e0      	b.n	80011a6 <__aeabi_ui2f+0x3a>
 80011e4:	0264      	lsls	r4, r4, #9
 80011e6:	2096      	movs	r0, #150	@ 0x96
 80011e8:	0a64      	lsrs	r4, r4, #9
 80011ea:	e7d3      	b.n	8001194 <__aeabi_ui2f+0x28>
 80011ec:	fbffffff 	.word	0xfbffffff

080011f0 <__clzsi2>:
 80011f0:	211c      	movs	r1, #28
 80011f2:	2301      	movs	r3, #1
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d301      	bcc.n	80011fe <__clzsi2+0xe>
 80011fa:	0c00      	lsrs	r0, r0, #16
 80011fc:	3910      	subs	r1, #16
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	4298      	cmp	r0, r3
 8001202:	d301      	bcc.n	8001208 <__clzsi2+0x18>
 8001204:	0a00      	lsrs	r0, r0, #8
 8001206:	3908      	subs	r1, #8
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	4298      	cmp	r0, r3
 800120c:	d301      	bcc.n	8001212 <__clzsi2+0x22>
 800120e:	0900      	lsrs	r0, r0, #4
 8001210:	3904      	subs	r1, #4
 8001212:	a202      	add	r2, pc, #8	@ (adr r2, 800121c <__clzsi2+0x2c>)
 8001214:	5c10      	ldrb	r0, [r2, r0]
 8001216:	1840      	adds	r0, r0, r1
 8001218:	4770      	bx	lr
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	02020304 	.word	0x02020304
 8001220:	01010101 	.word	0x01010101
	...

0800122c <__clzdi2>:
 800122c:	b510      	push	{r4, lr}
 800122e:	2900      	cmp	r1, #0
 8001230:	d103      	bne.n	800123a <__clzdi2+0xe>
 8001232:	f7ff ffdd 	bl	80011f0 <__clzsi2>
 8001236:	3020      	adds	r0, #32
 8001238:	e002      	b.n	8001240 <__clzdi2+0x14>
 800123a:	0008      	movs	r0, r1
 800123c:	f7ff ffd8 	bl	80011f0 <__clzsi2>
 8001240:	bd10      	pop	{r4, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)

08001244 <check_button>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool check_button(struct Button_t *button)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    bool reading = HAL_GPIO_ReadPin(button->port, button->pin) == GPIO_PIN_SET;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	0019      	movs	r1, r3
 8001256:	0010      	movs	r0, r2
 8001258:	f001 fce8 	bl	8002c2c <HAL_GPIO_ReadPin>
 800125c:	0003      	movs	r3, r0
 800125e:	001a      	movs	r2, r3
 8001260:	240e      	movs	r4, #14
 8001262:	193b      	adds	r3, r7, r4
 8001264:	3a01      	subs	r2, #1
 8001266:	4251      	negs	r1, r2
 8001268:	414a      	adcs	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 800126c:	f000 fd54 	bl	8001d18 <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	60bb      	str	r3, [r7, #8]
    bool result = false;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]

    if (reading != button->last_state) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7c1b      	ldrb	r3, [r3, #16]
 8001280:	193a      	adds	r2, r7, r4
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d002      	beq.n	800128e <check_button+0x4a>
        button->last_debounce_time = current_time;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	609a      	str	r2, [r3, #8]
    }

    if ((current_time - button->last_debounce_time) > button->debounce_delay) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	1ad2      	subs	r2, r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	429a      	cmp	r2, r3
 800129c:	d912      	bls.n	80012c4 <check_button+0x80>
        if (reading != button->state) {
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7c5b      	ldrb	r3, [r3, #17]
 80012a2:	210e      	movs	r1, #14
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d00b      	beq.n	80012c4 <check_button+0x80>
            button->state = reading;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	187a      	adds	r2, r7, r1
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	745a      	strb	r2, [r3, #17]
            if (button->state == true) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7c5b      	ldrb	r3, [r3, #17]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <check_button+0x80>
                result = true;  // Button was pressed
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    button->last_state = reading;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	220e      	movs	r2, #14
 80012c8:	18ba      	adds	r2, r7, r2
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	741a      	strb	r2, [r3, #16]
    return result;
 80012ce:	230f      	movs	r3, #15
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	781b      	ldrb	r3, [r3, #0]
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b005      	add	sp, #20
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <update_rgb_led>:
void update_rgb_led(float voltage)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    static uint8_t current_state = 0; // 0: red, 1: yellow, 2: green
    uint32_t current_time = HAL_GetTick();
 80012e4:	f000 fd18 	bl	8001d18 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]

    // State transitions with additional critical low voltage state
        if (voltage < 9.2f) { // Critical low voltage
 80012ec:	4966      	ldr	r1, [pc, #408]	@ (8001488 <update_rgb_led+0x1ac>)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7fe ffa8 	bl	8000244 <__aeabi_fcmplt>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d003      	beq.n	8001300 <update_rgb_led+0x24>
            current_state = 3; // Blinking red state
 80012f8:	4b64      	ldr	r3, [pc, #400]	@ (800148c <update_rgb_led+0x1b0>)
 80012fa:	2203      	movs	r2, #3
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e040      	b.n	8001382 <update_rgb_led+0xa6>
        }
        else if (current_state == 3 && voltage >= 9.6f) { // Return to red state when voltage recovers
 8001300:	4b62      	ldr	r3, [pc, #392]	@ (800148c <update_rgb_led+0x1b0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d109      	bne.n	800131c <update_rgb_led+0x40>
 8001308:	4961      	ldr	r1, [pc, #388]	@ (8001490 <update_rgb_led+0x1b4>)
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7fe ffb8 	bl	8000280 <__aeabi_fcmpge>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d003      	beq.n	800131c <update_rgb_led+0x40>
            current_state = 0; // Solid red
 8001314:	4b5d      	ldr	r3, [pc, #372]	@ (800148c <update_rgb_led+0x1b0>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e032      	b.n	8001382 <update_rgb_led+0xa6>
        }
        else if (current_state == 0) { // Currently RED
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <update_rgb_led+0x1b0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <update_rgb_led+0x5c>
            if (voltage >= VOLT_HIGH_MEDIUM) {
 8001324:	495b      	ldr	r1, [pc, #364]	@ (8001494 <update_rgb_led+0x1b8>)
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7fe ffaa 	bl	8000280 <__aeabi_fcmpge>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d028      	beq.n	8001382 <update_rgb_led+0xa6>
                current_state = 1; // Switch to YELLOW
 8001330:	4b56      	ldr	r3, [pc, #344]	@ (800148c <update_rgb_led+0x1b0>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e024      	b.n	8001382 <update_rgb_led+0xa6>
            }
        }
        else if (current_state == 1) { // Currently YELLOW
 8001338:	4b54      	ldr	r3, [pc, #336]	@ (800148c <update_rgb_led+0x1b0>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d113      	bne.n	8001368 <update_rgb_led+0x8c>
            if (voltage >= VOLT_HIGH_FULL) {
 8001340:	4955      	ldr	r1, [pc, #340]	@ (8001498 <update_rgb_led+0x1bc>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7fe ff9c 	bl	8000280 <__aeabi_fcmpge>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d003      	beq.n	8001354 <update_rgb_led+0x78>
                current_state = 2; // Switch to GREEN
 800134c:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <update_rgb_led+0x1b0>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e016      	b.n	8001382 <update_rgb_led+0xa6>
            }
            else if (voltage < VOLT_LOW_MEDIUM) {
 8001354:	4951      	ldr	r1, [pc, #324]	@ (800149c <update_rgb_led+0x1c0>)
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7fe ff74 	bl	8000244 <__aeabi_fcmplt>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d010      	beq.n	8001382 <update_rgb_led+0xa6>
                current_state = 0; // Switch to RED
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <update_rgb_led+0x1b0>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e00c      	b.n	8001382 <update_rgb_led+0xa6>
            }
        }
        else if (current_state == 2) { // Currently GREEN
 8001368:	4b48      	ldr	r3, [pc, #288]	@ (800148c <update_rgb_led+0x1b0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d108      	bne.n	8001382 <update_rgb_led+0xa6>
            if (voltage < VOLT_LOW_FULL) {
 8001370:	494b      	ldr	r1, [pc, #300]	@ (80014a0 <update_rgb_led+0x1c4>)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7fe ff66 	bl	8000244 <__aeabi_fcmplt>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d002      	beq.n	8001382 <update_rgb_led+0xa6>
                current_state = 1; // Switch to YELLOW
 800137c:	4b43      	ldr	r3, [pc, #268]	@ (800148c <update_rgb_led+0x1b0>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
            }
        }

    // Set LED states based on current_state
    switch (current_state) {
 8001382:	4b42      	ldr	r3, [pc, #264]	@ (800148c <update_rgb_led+0x1b0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d005      	beq.n	8001396 <update_rgb_led+0xba>
 800138a:	dc63      	bgt.n	8001454 <update_rgb_led+0x178>
 800138c:	2b01      	cmp	r3, #1
 800138e:	d04b      	beq.n	8001428 <update_rgb_led+0x14c>
 8001390:	2b02      	cmp	r3, #2
 8001392:	d033      	beq.n	80013fc <update_rgb_led+0x120>
 8001394:	e05e      	b.n	8001454 <update_rgb_led+0x178>
    	case 3: // Critical LOW - Blinking RED
        if (current_time - last_blink_time >= BLINK_INTERVAL) {
 8001396:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <update_rgb_led+0x1c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	23fa      	movs	r3, #250	@ 0xfa
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d311      	bcc.n	80013ca <update_rgb_led+0xee>
            last_blink_time = current_time;
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <update_rgb_led+0x1c8>)
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	601a      	str	r2, [r3, #0]
            blink_state = !blink_state;
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <update_rgb_led+0x1cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	4193      	sbcs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2201      	movs	r2, #1
 80013ba:	4053      	eors	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	1c1a      	adds	r2, r3, #0
 80013c0:	2301      	movs	r3, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <update_rgb_led+0x1cc>)
 80013c8:	701a      	strb	r2, [r3, #0]
        }
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Green OFF
 80013ca:	23a0      	movs	r3, #160	@ 0xa0
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f001 fc47 	bl	8002c66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Blue OFF
 80013d8:	23a0      	movs	r3, #160	@ 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	2200      	movs	r2, #0
 80013de:	2104      	movs	r1, #4
 80013e0:	0018      	movs	r0, r3
 80013e2:	f001 fc40 	bl	8002c66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, blink_state ? GPIO_PIN_SET : GPIO_PIN_RESET); // Red Blinking
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <update_rgb_led+0x1cc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	001a      	movs	r2, r3
 80013ee:	23a0      	movs	r3, #160	@ 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2108      	movs	r1, #8
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fc36 	bl	8002c66 <HAL_GPIO_WritePin>
        break;
 80013fa:	e041      	b.n	8001480 <update_rgb_led+0x1a4>
        case 2: // GREEN - Full battery
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // Green ON
 80013fc:	23a0      	movs	r3, #160	@ 0xa0
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	2201      	movs	r2, #1
 8001402:	2102      	movs	r1, #2
 8001404:	0018      	movs	r0, r3
 8001406:	f001 fc2e 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Blue OFF
 800140a:	23a0      	movs	r3, #160	@ 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fc27 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Red OFF
 8001418:	23a0      	movs	r3, #160	@ 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	2200      	movs	r2, #0
 800141e:	2108      	movs	r1, #8
 8001420:	0018      	movs	r0, r3
 8001422:	f001 fc20 	bl	8002c66 <HAL_GPIO_WritePin>
            break;
 8001426:	e02b      	b.n	8001480 <update_rgb_led+0x1a4>

        case 1: // YELLOW - Medium battery
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // Green ON
 8001428:	23a0      	movs	r3, #160	@ 0xa0
 800142a:	05db      	lsls	r3, r3, #23
 800142c:	2201      	movs	r2, #1
 800142e:	2102      	movs	r1, #2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fc18 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Blue OFF
 8001436:	23a0      	movs	r3, #160	@ 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2200      	movs	r2, #0
 800143c:	2104      	movs	r1, #4
 800143e:	0018      	movs	r0, r3
 8001440:	f001 fc11 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // Red ON
 8001444:	23a0      	movs	r3, #160	@ 0xa0
 8001446:	05db      	lsls	r3, r3, #23
 8001448:	2201      	movs	r2, #1
 800144a:	2108      	movs	r1, #8
 800144c:	0018      	movs	r0, r3
 800144e:	f001 fc0a 	bl	8002c66 <HAL_GPIO_WritePin>
            break;
 8001452:	e015      	b.n	8001480 <update_rgb_led+0x1a4>

        case 0: // RED - Low battery
        default:
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Green OFF
 8001454:	23a0      	movs	r3, #160	@ 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	2200      	movs	r2, #0
 800145a:	2102      	movs	r1, #2
 800145c:	0018      	movs	r0, r3
 800145e:	f001 fc02 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Blue OFF
 8001462:	23a0      	movs	r3, #160	@ 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	2200      	movs	r2, #0
 8001468:	2104      	movs	r1, #4
 800146a:	0018      	movs	r0, r3
 800146c:	f001 fbfb 	bl	8002c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // Red ON
 8001470:	23a0      	movs	r3, #160	@ 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2201      	movs	r2, #1
 8001476:	2108      	movs	r1, #8
 8001478:	0018      	movs	r0, r3
 800147a:	f001 fbf4 	bl	8002c66 <HAL_GPIO_WritePin>
            break;
 800147e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}
 8001488:	41133333 	.word	0x41133333
 800148c:	2000017e 	.word	0x2000017e
 8001490:	4119999a 	.word	0x4119999a
 8001494:	41200000 	.word	0x41200000
 8001498:	413ccccd 	.word	0x413ccccd
 800149c:	411ccccd 	.word	0x411ccccd
 80014a0:	4139999a 	.word	0x4139999a
 80014a4:	20000178 	.word	0x20000178
 80014a8:	2000017c 	.word	0x2000017c

080014ac <update_system_state>:

void update_system_state(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af02      	add	r7, sp, #8
    if (adc_conversion_complete) {
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <update_system_state+0x80>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d033      	beq.n	8001524 <update_system_state+0x78>
        adc_conversion_complete = 0;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <update_system_state+0x80>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
        adc_val = adc_buffer[0];
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <update_system_state+0x84>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <update_system_state+0x88>)
 80014ca:	801a      	strh	r2, [r3, #0]

        // Calculate voltage using calibrated values
        voltage = my_map(adc_val, ADC_MIN, ADC_MAX, VOLT_MIN, VOLT_MAX);
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <update_system_state+0x88>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fe4a 	bl	800116c <__aeabi_ui2f>
 80014d8:	4c17      	ldr	r4, [pc, #92]	@ (8001538 <update_system_state+0x8c>)
 80014da:	4a18      	ldr	r2, [pc, #96]	@ (800153c <update_system_state+0x90>)
 80014dc:	4918      	ldr	r1, [pc, #96]	@ (8001540 <update_system_state+0x94>)
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <update_system_state+0x98>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	1c23      	adds	r3, r4, #0
 80014e4:	f000 f832 	bl	800154c <my_map>
 80014e8:	1c02      	adds	r2, r0, #0
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <update_system_state+0x9c>)
 80014ec:	601a      	str	r2, [r3, #0]

        // Clamp voltage to valid range
        if (voltage > VOLT_MAX) voltage = VOLT_MAX;
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <update_system_state+0x9c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4914      	ldr	r1, [pc, #80]	@ (8001544 <update_system_state+0x98>)
 80014f4:	1c18      	adds	r0, r3, #0
 80014f6:	f7fe feb9 	bl	800026c <__aeabi_fcmpgt>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d002      	beq.n	8001504 <update_system_state+0x58>
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <update_system_state+0x9c>)
 8001500:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <update_system_state+0x98>)
 8001502:	601a      	str	r2, [r3, #0]
        if (voltage < VOLT_MIN) voltage = VOLT_MIN;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <update_system_state+0x9c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	490b      	ldr	r1, [pc, #44]	@ (8001538 <update_system_state+0x8c>)
 800150a:	1c18      	adds	r0, r3, #0
 800150c:	f7fe fe9a 	bl	8000244 <__aeabi_fcmplt>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d002      	beq.n	800151a <update_system_state+0x6e>
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <update_system_state+0x9c>)
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <update_system_state+0x8c>)
 8001518:	601a      	str	r2, [r3, #0]

        update_rgb_led(voltage);
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <update_system_state+0x9c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1c18      	adds	r0, r3, #0
 8001520:	f7ff fedc 	bl	80012dc <update_rgb_led>
    }
}
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b001      	add	sp, #4
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	2000016a 	.word	0x2000016a
 8001530:	20000168 	.word	0x20000168
 8001534:	20000170 	.word	0x20000170
 8001538:	41100000 	.word	0x41100000
 800153c:	455a7000 	.word	0x455a7000
 8001540:	4519b000 	.word	0x4519b000
 8001544:	4149999a 	.word	0x4149999a
 8001548:	20000174 	.word	0x20000174

0800154c <my_map>:

float my_map(float x, float in_min, float in_max, float out_min, float out_max) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fc61 	bl	8000e24 <__aeabi_fsub>
 8001562:	1c03      	adds	r3, r0, #0
 8001564:	1c1c      	adds	r4, r3, #0
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	6a38      	ldr	r0, [r7, #32]
 800156a:	f7ff fc5b 	bl	8000e24 <__aeabi_fsub>
 800156e:	1c03      	adds	r3, r0, #0
 8001570:	1c19      	adds	r1, r3, #0
 8001572:	1c20      	adds	r0, r4, #0
 8001574:	f7ff fb18 	bl	8000ba8 <__aeabi_fmul>
 8001578:	1c03      	adds	r3, r0, #0
 800157a:	1c1c      	adds	r4, r3, #0
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fc50 	bl	8000e24 <__aeabi_fsub>
 8001584:	1c03      	adds	r3, r0, #0
 8001586:	1c19      	adds	r1, r3, #0
 8001588:	1c20      	adds	r0, r4, #0
 800158a:	f7ff f927 	bl	80007dc <__aeabi_fdiv>
 800158e:	1c03      	adds	r3, r0, #0
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	1c18      	adds	r0, r3, #0
 8001594:	f7fe ff98 	bl	80004c8 <__aeabi_fadd>
 8001598:	1c03      	adds	r3, r0, #0
}
 800159a:	1c18      	adds	r0, r3, #0
 800159c:	46bd      	mov	sp, r7
 800159e:	b005      	add	sp, #20
 80015a0:	bd90      	pop	{r4, r7, pc}
	...

080015a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    adc_conversion_complete = 1;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_ADC_ConvCpltCallback+0x18>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	2000016a 	.word	0x2000016a

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 fb41 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f85f 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 f981 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d2:	f000 f961 	bl	8001898 <MX_DMA_Init>
  MX_ADC_Init();
 80015d6:	f000 f8cb 	bl	8001770 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80015da:	f000 f92f 	bl	800183c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Start ADC with DMA */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, ADC_BUFFER_SIZE);
 80015de:	4926      	ldr	r1, [pc, #152]	@ (8001678 <main+0xb8>)
 80015e0:	4b26      	ldr	r3, [pc, #152]	@ (800167c <main+0xbc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 fd15 	bl	8002014 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // Continuously check button
	    if (check_button(&power_button)) {
 80015ea:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <main+0xc0>)
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fe29 	bl	8001244 <check_button>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d02a      	beq.n	800164c <main+0x8c>
	      device_on = !device_on;
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <main+0xc4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	4193      	sbcs	r3, r2
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2201      	movs	r2, #1
 8001602:	4053      	eors	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	1c1a      	adds	r2, r3, #0
 8001608:	2301      	movs	r3, #1
 800160a:	4013      	ands	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <main+0xc4>)
 8001610:	701a      	strb	r2, [r3, #0]

	      // Immediately update LED states when button is pressed
	      if (!device_on) {
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <main+0xc4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4053      	eors	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <main+0x70>
	        // Turn off all LEDs immediately when device is turned off
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001620:	23a0      	movs	r3, #160	@ 0xa0
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	2200      	movs	r2, #0
 8001626:	213e      	movs	r1, #62	@ 0x3e
 8001628:	0018      	movs	r0, r3
 800162a:	f001 fb1c 	bl	8002c66 <HAL_GPIO_WritePin>
 800162e:	e00d      	b.n	800164c <main+0x8c>
	      } else {
	        // Turn on power LED immediately when device is turned on
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001630:	23a0      	movs	r3, #160	@ 0xa0
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	2201      	movs	r2, #1
 8001636:	2120      	movs	r1, #32
 8001638:	0018      	movs	r0, r3
 800163a:	f001 fb14 	bl	8002c66 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800163e:	23a0      	movs	r3, #160	@ 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	0018      	movs	r0, r3
 8001648:	f001 fb0d 	bl	8002c66 <HAL_GPIO_WritePin>
	      }
	    }

	    // Update ADC and RGB LEDs every UPDATE_INTERVAL if device is on
	    uint32_t current_time = HAL_GetTick();
 800164c:	f000 fb64 	bl	8001d18 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	607b      	str	r3, [r7, #4]
	    if (device_on && (current_time - last_update_time >= UPDATE_INTERVAL)) {
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <main+0xc4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0c6      	beq.n	80015ea <main+0x2a>
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <main+0xc8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	1ad2      	subs	r2, r2, r3
 8001664:	23fa      	movs	r3, #250	@ 0xfa
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d3be      	bcc.n	80015ea <main+0x2a>
	      update_system_state();
 800166c:	f7ff ff1e 	bl	80014ac <update_system_state>
	      last_update_time = current_time;
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <main+0xc8>)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
  {
 8001676:	e7b8      	b.n	80015ea <main+0x2a>
 8001678:	20000168 	.word	0x20000168
 800167c:	2000003c 	.word	0x2000003c
 8001680:	20000000 	.word	0x20000000
 8001684:	2000017d 	.word	0x2000017d
 8001688:	2000016c 	.word	0x2000016c

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b099      	sub	sp, #100	@ 0x64
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	242c      	movs	r4, #44	@ 0x2c
 8001694:	193b      	adds	r3, r7, r4
 8001696:	0018      	movs	r0, r3
 8001698:	2334      	movs	r3, #52	@ 0x34
 800169a:	001a      	movs	r2, r3
 800169c:	2100      	movs	r1, #0
 800169e:	f002 fe93 	bl	80043c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a2:	2318      	movs	r3, #24
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	0018      	movs	r0, r3
 80016a8:	2314      	movs	r3, #20
 80016aa:	001a      	movs	r2, r3
 80016ac:	2100      	movs	r1, #0
 80016ae:	f002 fe8b 	bl	80043c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b2:	003b      	movs	r3, r7
 80016b4:	0018      	movs	r0, r3
 80016b6:	2318      	movs	r3, #24
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f002 fe84 	bl	80043c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <SystemClock_Config+0xdc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a29      	ldr	r2, [pc, #164]	@ (800176c <SystemClock_Config+0xe0>)
 80016c6:	401a      	ands	r2, r3
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <SystemClock_Config+0xdc>)
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	0109      	lsls	r1, r1, #4
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d2:	0021      	movs	r1, r4
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2201      	movs	r2, #1
 80016de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2210      	movs	r2, #16
 80016e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2202      	movs	r2, #2
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	02d2      	lsls	r2, r2, #11
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	03d2      	lsls	r2, r2, #15
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	187b      	adds	r3, r7, r1
 8001704:	0018      	movs	r0, r3
 8001706:	f001 facb 	bl	8002ca0 <HAL_RCC_OscConfig>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800170e:	f000 f941 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	2118      	movs	r1, #24
 8001714:	187b      	adds	r3, r7, r1
 8001716:	220f      	movs	r2, #15
 8001718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2203      	movs	r2, #3
 800171e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2101      	movs	r1, #1
 8001736:	0018      	movs	r0, r3
 8001738:	f001 fe2e 	bl	8003398 <HAL_RCC_ClockConfig>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001740:	f000 f928 	bl	8001994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001744:	003b      	movs	r3, r7
 8001746:	2204      	movs	r2, #4
 8001748:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800174a:	003b      	movs	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	003b      	movs	r3, r7
 8001752:	0018      	movs	r0, r3
 8001754:	f002 f844 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800175c:	f000 f91a 	bl	8001994 <Error_Handler>
  }
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b019      	add	sp, #100	@ 0x64
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	40007000 	.word	0x40007000
 800176c:	ffffe7ff 	.word	0xffffe7ff

08001770 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	003b      	movs	r3, r7
 8001778:	0018      	movs	r0, r3
 800177a:	2308      	movs	r3, #8
 800177c:	001a      	movs	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	f002 fe22 	bl	80043c8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <MX_ADC_Init+0xc0>)
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <MX_ADC_Init+0xc4>)
 8001788:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <MX_ADC_Init+0xc0>)
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <MX_ADC_Init+0xc0>)
 8001792:	2280      	movs	r2, #128	@ 0x80
 8001794:	0392      	lsls	r2, r2, #14
 8001796:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <MX_ADC_Init+0xc0>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017b2:	2220      	movs	r2, #32
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017ba:	2221      	movs	r2, #33	@ 0x21
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017c8:	22c2      	movs	r2, #194	@ 0xc2
 80017ca:	32ff      	adds	r2, #255	@ 0xff
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017d0:	222c      	movs	r2, #44	@ 0x2c
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017d8:	2204      	movs	r2, #4
 80017da:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_ADC_Init+0xc0>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fa98 	bl	8001d2c <HAL_ADC_Init>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001800:	f000 f8c8 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001804:	003b      	movs	r3, r7
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <MX_ADC_Init+0xc8>)
 8001808:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800180a:	003b      	movs	r3, r7
 800180c:	2280      	movs	r2, #128	@ 0x80
 800180e:	0152      	lsls	r2, r2, #5
 8001810:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001812:	003a      	movs	r2, r7
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_ADC_Init+0xc0>)
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f000 fc8d 	bl	8002138 <HAL_ADC_ConfigChannel>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001822:	f000 f8b7 	bl	8001994 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */
  // Start ADC with DMA

  /* USER CODE END ADC_Init 2 */

}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	2000003c 	.word	0x2000003c
 8001834:	40012400 	.word	0x40012400
 8001838:	1c000080 	.word	0x1c000080

0800183c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <MX_LPUART1_UART_Init+0x58>)
 8001844:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001848:	22e1      	movs	r2, #225	@ 0xe1
 800184a:	0252      	lsls	r2, r2, #9
 800184c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	0552      	lsls	r2, r2, #21
 8001854:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001864:	220c      	movs	r2, #12
 8001866:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <MX_LPUART1_UART_Init+0x54>)
 800187c:	0018      	movs	r0, r3
 800187e:	f002 f8db 	bl	8003a38 <HAL_UART_Init>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 8001886:	f000 f885 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000e0 	.word	0x200000e0
 8001894:	40004800 	.word	0x40004800

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2009      	movs	r0, #9
 80018bc:	f000 fe5c 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018c0:	2009      	movs	r0, #9
 80018c2:	f000 fe6e 	bl	80025a2 <HAL_NVIC_EnableIRQ>

}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	240c      	movs	r4, #12
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	0018      	movs	r0, r3
 80018e0:	2314      	movs	r3, #20
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f002 fd6f 	bl	80043c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018f0:	2104      	movs	r1, #4
 80018f2:	430a      	orrs	r2, r1
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018f6:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	2204      	movs	r2, #4
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001908:	2101      	movs	r1, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_GPIO_Init+0xbc>)
 800191c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001920:	2102      	movs	r1, #2
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001932:	23a0      	movs	r3, #160	@ 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	2200      	movs	r2, #0
 8001938:	213e      	movs	r1, #62	@ 0x3e
 800193a:	0018      	movs	r0, r3
 800193c:	f001 f993 	bl	8002c66 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	193b      	adds	r3, r7, r4
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	193a      	adds	r2, r7, r4
 8001954:	23a0      	movs	r3, #160	@ 0xa0
 8001956:	05db      	lsls	r3, r3, #23
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fff8 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001960:	0021      	movs	r1, r4
 8001962:	187b      	adds	r3, r7, r1
 8001964:	223e      	movs	r2, #62	@ 0x3e
 8001966:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2201      	movs	r2, #1
 800196c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	187a      	adds	r2, r7, r1
 800197c:	23a0      	movs	r3, #160	@ 0xa0
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	0011      	movs	r1, r2
 8001982:	0018      	movs	r0, r3
 8001984:	f000 ffe4 	bl	8002950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b009      	add	sp, #36	@ 0x24
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	e7fd      	b.n	800199c <Error_Handler+0x8>

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <HAL_MspInit+0x24>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x24>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_MspInit+0x24>)
 80019b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_MspInit+0x24>)
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	0549      	lsls	r1, r1, #21
 80019ba:	430a      	orrs	r2, r1
 80019bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	240c      	movs	r4, #12
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	0018      	movs	r0, r3
 80019d6:	2314      	movs	r3, #20
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	f002 fcf4 	bl	80043c8 <memset>
  if(hadc->Instance==ADC1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a90 <HAL_ADC_MspInit+0xc8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d14d      	bne.n	8001a86 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <HAL_ADC_MspInit+0xcc>)
 80019ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <HAL_ADC_MspInit+0xcc>)
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	0089      	lsls	r1, r1, #2
 80019f4:	430a      	orrs	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_ADC_MspInit+0xcc>)
 80019fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_ADC_MspInit+0xcc>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_ADC_MspInit+0xcc>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	2203      	movs	r2, #3
 8001a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	193a      	adds	r2, r7, r4
 8001a24:	23a0      	movs	r3, #160	@ 0xa0
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	0011      	movs	r1, r2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 ff90 	bl	8002950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a32:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_ADC_MspInit+0xd4>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	00d2      	lsls	r2, r2, #3
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a60:	2220      	movs	r2, #32
 8001a62:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 fdb5 	bl	80025dc <HAL_DMA_Init>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8001a76:	f7ff ff8d 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_ADC_MspInit+0xd0>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b009      	add	sp, #36	@ 0x24
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	40012400 	.word	0x40012400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	20000098 	.word	0x20000098
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08b      	sub	sp, #44	@ 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	2414      	movs	r4, #20
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	2314      	movs	r3, #20
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f002 fc88 	bl	80043c8 <memset>
  if(huart->Instance==LPUART1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_UART_MspInit+0xc0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d14a      	bne.n	8001b58 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ac2:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001ac4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	02c9      	lsls	r1, r1, #11
 8001acc:	430a      	orrs	r2, r1
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001aee:	2102      	movs	r1, #2
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_UART_MspInit+0xc4>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	2202      	movs	r2, #2
 8001b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	2203      	movs	r2, #3
 8001b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	2206      	movs	r2, #6
 8001b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <HAL_UART_MspInit+0xc8>)
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f000 ff13 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2280      	movs	r2, #128	@ 0x80
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2202      	movs	r2, #2
 8001b38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2203      	movs	r2, #3
 8001b44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2206      	movs	r2, #6
 8001b4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_UART_MspInit+0xcc>)
 8001b50:	0019      	movs	r1, r3
 8001b52:	0010      	movs	r0, r2
 8001b54:	f000 fefc 	bl	8002950 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b00b      	add	sp, #44	@ 0x2c
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	40004800 	.word	0x40004800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	50000800 	.word	0x50000800
 8001b6c:	50000400 	.word	0x50000400

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	e7fd      	b.n	8001b74 <NMI_Handler+0x4>

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	e7fd      	b.n	8001b7c <HardFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b84:	46c0      	nop			@ (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 f8ac 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <DMA1_Channel1_IRQHandler+0x14>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fdf4 	bl	8002798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	20000098 	.word	0x20000098

08001bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bc8:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bca:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff fff6 	bl	8001bbc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001bd0:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <LoopForever+0x6>)
    LDR R1, [R0]
 8001bd2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001bd4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <LoopForever+0xa>)
    CMP R1, R2
 8001bd8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001bda:	d105      	bne.n	8001be8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001bdc:	4811      	ldr	r0, [pc, #68]	@ (8001c24 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001bde:	4912      	ldr	r1, [pc, #72]	@ (8001c28 <LoopForever+0x12>)
    STR R1, [R0]
 8001be0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001be2:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001be4:	4912      	ldr	r1, [pc, #72]	@ (8001c30 <LoopForever+0x1a>)
    STR R1, [R0]
 8001be6:	6001      	str	r1, [r0, #0]

08001be8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be8:	4812      	ldr	r0, [pc, #72]	@ (8001c34 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001bea:	4913      	ldr	r1, [pc, #76]	@ (8001c38 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001bec:	4a13      	ldr	r2, [pc, #76]	@ (8001c3c <LoopForever+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001c00:	4c10      	ldr	r4, [pc, #64]	@ (8001c44 <LoopForever+0x2e>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f002 fbe3 	bl	80043d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff fcd5 	bl	80015c0 <main>

08001c16 <LoopForever>:

LoopForever:
    b LoopForever
 8001c16:	e7fe      	b.n	8001c16 <LoopForever>
   ldr   r0, =_estack
 8001c18:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8001c1c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001c20:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001c24:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001c28:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001c2c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001c30:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001c3c:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8001c40:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001c44:	20000184 	.word	0x20000184

08001c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_IRQHandler>
	...

08001c4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_Init+0x3c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_Init+0x3c>)
 8001c5e:	2140      	movs	r1, #64	@ 0x40
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f811 	bl	8001c8c <HAL_InitTick>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e001      	b.n	8001c7a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c76:	f7ff fe93 	bl	80019a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_InitTick+0x5c>)
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_InitTick+0x60>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	23fa      	movs	r3, #250	@ 0xfa
 8001ca0:	0098      	lsls	r0, r3, #2
 8001ca2:	f7fe fa31 	bl	8000108 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0020      	movs	r0, r4
 8001cac:	f7fe fa2c 	bl	8000108 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fc85 	bl	80025c2 <HAL_SYSTICK_Config>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e00f      	b.n	8001ce0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d80b      	bhi.n	8001cde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	425b      	negs	r3, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fc52 	bl	8002578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_InitTick+0x64>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	20000014 	.word	0x20000014
 8001cec:	2000001c 	.word	0x2000001c
 8001cf0:	20000018 	.word	0x20000018

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_IncTick+0x1c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_IncTick+0x20>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	18d2      	adds	r2, r2, r3
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_IncTick+0x20>)
 8001d06:	601a      	str	r2, [r3, #0]
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	2000001c 	.word	0x2000001c
 8001d14:	20000180 	.word	0x20000180

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	@ (8001d28 <HAL_GetTick+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	20000180 	.word	0x20000180

08001d2c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e159      	b.n	8001ff2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2250      	movs	r2, #80	@ 0x50
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f7ff fe36 	bl	80019c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	2210      	movs	r2, #16
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d005      	beq.n	8001d74 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d72:	d00b      	beq.n	8001d8c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d78:	2210      	movs	r2, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2250      	movs	r2, #80	@ 0x50
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e132      	b.n	8001ff2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d90:	4a9a      	ldr	r2, [pc, #616]	@ (8001ffc <HAL_ADC_Init+0x2d0>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	2202      	movs	r2, #2
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2203      	movs	r2, #3
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <HAL_ADC_Init+0x90>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_Init+0x90>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_ADC_Init+0x92>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d149      	bne.n	8001e56 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	23c0      	movs	r3, #192	@ 0xc0
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d00b      	beq.n	8001de6 <HAL_ADC_Init+0xba>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	05db      	lsls	r3, r3, #23
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d005      	beq.n	8001de6 <HAL_ADC_Init+0xba>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_Init+0xde>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	0892      	lsrs	r2, r2, #2
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6919      	ldr	r1, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	611a      	str	r2, [r3, #16]
 8001e08:	e014      	b.n	8001e34 <HAL_ADC_Init+0x108>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	0892      	lsrs	r2, r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	4b79      	ldr	r3, [pc, #484]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b78      	ldr	r3, [pc, #480]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e20:	4978      	ldr	r1, [pc, #480]	@ (8002004 <HAL_ADC_Init+0x2d8>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	4b76      	ldr	r3, [pc, #472]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2118      	movs	r1, #24
 8001e40:	438a      	bics	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001e56:	4b6a      	ldr	r3, [pc, #424]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b69      	ldr	r3, [pc, #420]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e5c:	496a      	ldr	r1, [pc, #424]	@ (8002008 <HAL_ADC_Init+0x2dc>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001e62:	4b67      	ldr	r3, [pc, #412]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6a:	065a      	lsls	r2, r3, #25
 8001e6c:	4b64      	ldr	r3, [pc, #400]	@ (8002000 <HAL_ADC_Init+0x2d4>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	0549      	lsls	r1, r1, #21
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	495b      	ldr	r1, [pc, #364]	@ (800200c <HAL_ADC_Init+0x2e0>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_Init+0x18c>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e000      	b.n	8001eba <HAL_ADC_Init+0x18e>
 8001eb8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001eba:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2020      	movs	r0, #32
 8001ec0:	5c1b      	ldrb	r3, [r3, r0]
 8001ec2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ec4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	202c      	movs	r0, #44	@ 0x2c
 8001eca:	5c1b      	ldrb	r3, [r3, r0]
 8001ecc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ece:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ed4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001edc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ee4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef2:	23c2      	movs	r3, #194	@ 0xc2
 8001ef4:	33ff      	adds	r3, #255	@ 0xff
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d00b      	beq.n	8001f12 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68d9      	ldr	r1, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2221      	movs	r2, #33	@ 0x21
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d11a      	bne.n	8001f52 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	0249      	lsls	r1, r1, #9
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	e00b      	b.n	8001f52 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	2220      	movs	r2, #32
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d11f      	bne.n	8001f9a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	492a      	ldr	r1, [pc, #168]	@ (8002010 <HAL_ADC_Init+0x2e4>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f78:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001f7e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	e00e      	b.n	8001fb8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2107      	movs	r1, #7
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6959      	ldr	r1, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	2201      	movs	r2, #1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	fffffefd 	.word	0xfffffefd
 8002000:	40012708 	.word	0x40012708
 8002004:	ffc3ffff 	.word	0xffc3ffff
 8002008:	fdffffff 	.word	0xfdffffff
 800200c:	fffe0219 	.word	0xfffe0219
 8002010:	fffffc03 	.word	0xfffffc03

08002014 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002020:	2317      	movs	r3, #23
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d15e      	bne.n	80020f2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2250      	movs	r2, #80	@ 0x50
 8002038:	5c9b      	ldrb	r3, [r3, r2]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Start_DMA+0x2e>
 800203e:	2302      	movs	r3, #2
 8002040:	e05e      	b.n	8002100 <HAL_ADC_Start_DMA+0xec>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2250      	movs	r2, #80	@ 0x50
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002062:	2317      	movs	r3, #23
 8002064:	18fc      	adds	r4, r7, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f8cd 	bl	8002208 <ADC_Enable>
 800206e:	0003      	movs	r3, r0
 8002070:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002072:	2317      	movs	r3, #23
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d13e      	bne.n	80020fa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	4a21      	ldr	r2, [pc, #132]	@ (8002108 <HAL_ADC_Start_DMA+0xf4>)
 8002082:	4013      	ands	r3, r2
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	0052      	lsls	r2, r2, #1
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2250      	movs	r2, #80	@ 0x50
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	4a1a      	ldr	r2, [pc, #104]	@ (800210c <HAL_ADC_Start_DMA+0xf8>)
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_ADC_Start_DMA+0xfc>)
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b0:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_ADC_Start_DMA+0x100>)
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	221c      	movs	r2, #28
 80020ba:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2110      	movs	r1, #16
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3340      	adds	r3, #64	@ 0x40
 80020d6:	0019      	movs	r1, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f000 faf6 	bl	80026cc <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2104      	movs	r1, #4
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e003      	b.n	80020fa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f2:	2317      	movs	r3, #23
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fa:	2317      	movs	r3, #23
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b007      	add	sp, #28
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	fffff0fe 	.word	0xfffff0fe
 800210c:	080022d9 	.word	0x080022d9
 8002110:	0800238d 	.word	0x0800238d
 8002114:	080023ab 	.word	0x080023ab

08002118 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002130:	46c0      	nop			@ (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2250      	movs	r2, #80	@ 0x50
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x18>
 800214c:	2302      	movs	r3, #2
 800214e:	e050      	b.n	80021f2 <HAL_ADC_ConfigChannel+0xba>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2250      	movs	r2, #80	@ 0x50
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2204      	movs	r2, #4
 8002160:	4013      	ands	r3, r2
 8002162:	d00b      	beq.n	800217c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	2220      	movs	r2, #32
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2250      	movs	r2, #80	@ 0x50
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e03a      	b.n	80021f2 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <HAL_ADC_ConfigChannel+0xc4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d018      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	035b      	lsls	r3, r3, #13
 8002192:	0b5a      	lsrs	r2, r3, #13
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	4013      	ands	r3, r2
 80021a6:	d01f      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_ADC_ConfigChannel+0xc8>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_ADC_ConfigChannel+0xc8>)
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	03c9      	lsls	r1, r1, #15
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e017      	b.n	80021e8 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	035b      	lsls	r3, r3, #13
 80021c4:	0b5b      	lsrs	r3, r3, #13
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	029b      	lsls	r3, r3, #10
 80021d8:	4013      	ands	r3, r2
 80021da:	d005      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_ADC_ConfigChannel+0xc8>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <HAL_ADC_ConfigChannel+0xc8>)
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <HAL_ADC_ConfigChannel+0xcc>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2250      	movs	r2, #80	@ 0x50
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	0018      	movs	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b002      	add	sp, #8
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	00001001 	.word	0x00001001
 8002200:	40012708 	.word	0x40012708
 8002204:	ffbfffff 	.word	0xffbfffff

08002208 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2203      	movs	r2, #3
 800221c:	4013      	ands	r3, r2
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <ADC_Enable+0x2c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <ADC_Enable+0x2c>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <ADC_Enable+0x2e>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d146      	bne.n	80022c8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <ADC_Enable+0xcc>)
 8002242:	4013      	ands	r3, r2
 8002244:	d00d      	beq.n	8002262 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	2210      	movs	r2, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	2201      	movs	r2, #1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e033      	b.n	80022ca <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002272:	2001      	movs	r0, #1
 8002274:	f000 f8b4 	bl	80023e0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002278:	f7ff fd4e 	bl	8001d18 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002280:	e01b      	b.n	80022ba <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002282:	f7ff fd49 	bl	8001d18 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b0a      	cmp	r3, #10
 800228e:	d914      	bls.n	80022ba <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	2b01      	cmp	r3, #1
 800229c:	d00d      	beq.n	80022ba <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	2210      	movs	r2, #16
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	2201      	movs	r2, #1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1dc      	bne.n	8002282 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	80000017 	.word	0x80000017

080022d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	2250      	movs	r2, #80	@ 0x50
 80022ec:	4013      	ands	r3, r2
 80022ee:	d141      	bne.n	8002374 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	2280      	movs	r2, #128	@ 0x80
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	23c0      	movs	r3, #192	@ 0xc0
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d12e      	bne.n	800236a <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d129      	bne.n	800236a <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	4013      	ands	r3, r2
 8002320:	2b08      	cmp	r3, #8
 8002322:	d122      	bne.n	800236a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d110      	bne.n	8002352 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	210c      	movs	r1, #12
 800233c:	438a      	bics	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	4a10      	ldr	r2, [pc, #64]	@ (8002388 <ADC_DMAConvCplt+0xb0>)
 8002346:	4013      	ands	r3, r2
 8002348:	2201      	movs	r2, #1
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002350:	e00b      	b.n	800236a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	2220      	movs	r2, #32
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	2201      	movs	r2, #1
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff f919 	bl	80015a4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002372:	e005      	b.n	8002380 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	0010      	movs	r0, r2
 800237e:	4798      	blx	r3
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fffffefe 	.word	0xfffffefe

0800238c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff febb 	bl	8002118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}

080023aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	431a      	orrs	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	2204      	movs	r2, #4
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7ff fea8 	bl	8002128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bd80      	pop	{r7, pc}

080023e0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <ADC_DelayMicroSecond+0x38>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	490b      	ldr	r1, [pc, #44]	@ (800241c <ADC_DelayMicroSecond+0x3c>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fd fe8a 	bl	8000108 <__udivsi3>
 80023f4:	0003      	movs	r3, r0
 80023f6:	001a      	movs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4353      	muls	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80023fe:	e002      	b.n	8002406 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3b01      	subs	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <ADC_DelayMicroSecond+0x20>
  }
}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	20000014 	.word	0x20000014
 800241c:	000f4240 	.word	0x000f4240

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	0002      	movs	r2, r0
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800242c:	1dfb      	adds	r3, r7, #7
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b7f      	cmp	r3, #127	@ 0x7f
 8002432:	d809      	bhi.n	8002448 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	231f      	movs	r3, #31
 800243c:	401a      	ands	r2, r3
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <__NVIC_EnableIRQ+0x30>)
 8002440:	2101      	movs	r1, #1
 8002442:	4091      	lsls	r1, r2
 8002444:	000a      	movs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
  }
}
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b7f      	cmp	r3, #127	@ 0x7f
 8002468:	d828      	bhi.n	80024bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246a:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <__NVIC_SetPriority+0xd4>)
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	33c0      	adds	r3, #192	@ 0xc0
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	589b      	ldr	r3, [r3, r2]
 800247a:	1dfa      	adds	r2, r7, #7
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	0011      	movs	r1, r2
 8002480:	2203      	movs	r2, #3
 8002482:	400a      	ands	r2, r1
 8002484:	00d2      	lsls	r2, r2, #3
 8002486:	21ff      	movs	r1, #255	@ 0xff
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	43d2      	mvns	r2, r2
 800248e:	401a      	ands	r2, r3
 8002490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	22ff      	movs	r2, #255	@ 0xff
 8002498:	401a      	ands	r2, r3
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	2303      	movs	r3, #3
 80024a2:	4003      	ands	r3, r0
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a8:	481f      	ldr	r0, [pc, #124]	@ (8002528 <__NVIC_SetPriority+0xd4>)
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	430a      	orrs	r2, r1
 80024b4:	33c0      	adds	r3, #192	@ 0xc0
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ba:	e031      	b.n	8002520 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <__NVIC_SetPriority+0xd8>)
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	0019      	movs	r1, r3
 80024c4:	230f      	movs	r3, #15
 80024c6:	400b      	ands	r3, r1
 80024c8:	3b08      	subs	r3, #8
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3306      	adds	r3, #6
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	18d3      	adds	r3, r2, r3
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1dfa      	adds	r2, r7, #7
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	0011      	movs	r1, r2
 80024dc:	2203      	movs	r2, #3
 80024de:	400a      	ands	r2, r1
 80024e0:	00d2      	lsls	r2, r2, #3
 80024e2:	21ff      	movs	r1, #255	@ 0xff
 80024e4:	4091      	lsls	r1, r2
 80024e6:	000a      	movs	r2, r1
 80024e8:	43d2      	mvns	r2, r2
 80024ea:	401a      	ands	r2, r3
 80024ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	22ff      	movs	r2, #255	@ 0xff
 80024f4:	401a      	ands	r2, r3
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	0018      	movs	r0, r3
 80024fc:	2303      	movs	r3, #3
 80024fe:	4003      	ands	r3, r0
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002504:	4809      	ldr	r0, [pc, #36]	@ (800252c <__NVIC_SetPriority+0xd8>)
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001c      	movs	r4, r3
 800250c:	230f      	movs	r3, #15
 800250e:	4023      	ands	r3, r4
 8002510:	3b08      	subs	r3, #8
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	430a      	orrs	r2, r1
 8002516:	3306      	adds	r3, #6
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	18c3      	adds	r3, r0, r3
 800251c:	3304      	adds	r3, #4
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b003      	add	sp, #12
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	045b      	lsls	r3, r3, #17
 8002540:	429a      	cmp	r2, r3
 8002542:	d301      	bcc.n	8002548 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002544:	2301      	movs	r3, #1
 8002546:	e010      	b.n	800256a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <SysTick_Config+0x44>)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	3a01      	subs	r2, #1
 800254e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002550:	2301      	movs	r3, #1
 8002552:	425b      	negs	r3, r3
 8002554:	2103      	movs	r1, #3
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff ff7c 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <SysTick_Config+0x44>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <SysTick_Config+0x44>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	210f      	movs	r1, #15
 8002584:	187b      	adds	r3, r7, r1
 8002586:	1c02      	adds	r2, r0, #0
 8002588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	187b      	adds	r3, r7, r1
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b25b      	sxtb	r3, r3
 8002592:	0011      	movs	r1, r2
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	0002      	movs	r2, r0
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff ff33 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff ffaf 	bl	8002530 <SysTick_Config>
 80025d2:	0003      	movs	r3, r0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e061      	b.n	80026b2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a32      	ldr	r2, [pc, #200]	@ (80026bc <HAL_DMA_Init+0xe0>)
 80025f4:	4694      	mov	ip, r2
 80025f6:	4463      	add	r3, ip
 80025f8:	2114      	movs	r1, #20
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7fd fd84 	bl	8000108 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_DMA_Init+0xe4>)
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2225      	movs	r2, #37	@ 0x25
 8002612:	2102      	movs	r1, #2
 8002614:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a28      	ldr	r2, [pc, #160]	@ (80026c4 <HAL_DMA_Init+0xe8>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	01db      	lsls	r3, r3, #7
 8002664:	429a      	cmp	r2, r3
 8002666:	d018      	beq.n	800269a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_DMA_Init+0xec>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002670:	211c      	movs	r1, #28
 8002672:	400b      	ands	r3, r1
 8002674:	210f      	movs	r1, #15
 8002676:	4099      	lsls	r1, r3
 8002678:	000b      	movs	r3, r1
 800267a:	43d9      	mvns	r1, r3
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_DMA_Init+0xec>)
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_DMA_Init+0xec>)
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	201c      	movs	r0, #28
 8002690:	4003      	ands	r3, r0
 8002692:	409a      	lsls	r2, r3
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_DMA_Init+0xec>)
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2225      	movs	r2, #37	@ 0x25
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	@ 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	bffdfff8 	.word	0xbffdfff8
 80026c0:	40020000 	.word	0x40020000
 80026c4:	ffff800f 	.word	0xffff800f
 80026c8:	400200a8 	.word	0x400200a8

080026cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2317      	movs	r3, #23
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2224      	movs	r2, #36	@ 0x24
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Start_IT+0x24>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e04f      	b.n	8002790 <HAL_DMA_Start_IT+0xc4>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2224      	movs	r2, #36	@ 0x24
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2225      	movs	r2, #37	@ 0x25
 80026fc:	5c9b      	ldrb	r3, [r3, r2]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d13a      	bne.n	800277a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2225      	movs	r2, #37	@ 0x25
 8002708:	2102      	movs	r1, #2
 800270a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	438a      	bics	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f8e3 	bl	80028f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	210e      	movs	r1, #14
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e00f      	b.n	8002768 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2104      	movs	r1, #4
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	210a      	movs	r1, #10
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2224      	movs	r2, #36	@ 0x24
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b006      	add	sp, #24
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b4:	221c      	movs	r2, #28
 80027b6:	4013      	ands	r3, r2
 80027b8:	2204      	movs	r2, #4
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	d026      	beq.n	8002812 <HAL_DMA_IRQHandler+0x7a>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2220      	movs	r2, #32
 80027d4:	4013      	ands	r3, r2
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2104      	movs	r1, #4
 80027e4:	438a      	bics	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	221c      	movs	r2, #28
 80027ee:	401a      	ands	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	2104      	movs	r1, #4
 80027f6:	4091      	lsls	r1, r2
 80027f8:	000a      	movs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	2b00      	cmp	r3, #0
 8002802:	d100      	bne.n	8002806 <HAL_DMA_IRQHandler+0x6e>
 8002804:	e071      	b.n	80028ea <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	0010      	movs	r0, r2
 800280e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002810:	e06b      	b.n	80028ea <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	221c      	movs	r2, #28
 8002818:	4013      	ands	r3, r2
 800281a:	2202      	movs	r2, #2
 800281c:	409a      	lsls	r2, r3
 800281e:	0013      	movs	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	d02d      	beq.n	8002882 <HAL_DMA_IRQHandler+0xea>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d029      	beq.n	8002882 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2220      	movs	r2, #32
 8002836:	4013      	ands	r3, r2
 8002838:	d10b      	bne.n	8002852 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	210a      	movs	r1, #10
 8002846:	438a      	bics	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2225      	movs	r2, #37	@ 0x25
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	221c      	movs	r2, #28
 8002858:	401a      	ands	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2102      	movs	r1, #2
 8002860:	4091      	lsls	r1, r2
 8002862:	000a      	movs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	@ 0x24
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d039      	beq.n	80028ea <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	0010      	movs	r0, r2
 800287e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002880:	e033      	b.n	80028ea <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	221c      	movs	r2, #28
 8002888:	4013      	ands	r3, r2
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	0013      	movs	r3, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	d02a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x154>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2208      	movs	r2, #8
 800289a:	4013      	ands	r3, r2
 800289c:	d026      	beq.n	80028ec <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	210e      	movs	r1, #14
 80028aa:	438a      	bics	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	221c      	movs	r2, #28
 80028b4:	401a      	ands	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2101      	movs	r1, #1
 80028bc:	4091      	lsls	r1, r2
 80028be:	000a      	movs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2225      	movs	r2, #37	@ 0x25
 80028cc:	2101      	movs	r1, #1
 80028ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	@ 0x24
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	0010      	movs	r0, r2
 80028e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46c0      	nop			@ (mov r8, r8)
}
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	221c      	movs	r2, #28
 8002908:	401a      	ands	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	2101      	movs	r1, #1
 8002910:	4091      	lsls	r1, r2
 8002912:	000a      	movs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d108      	bne.n	8002938 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002936:	e007      	b.n	8002948 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b004      	add	sp, #16
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002966:	e149      	b.n	8002bfc <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4091      	lsls	r1, r2
 8002972:	000a      	movs	r2, r1
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d100      	bne.n	8002980 <HAL_GPIO_Init+0x30>
 800297e:	e13a      	b.n	8002bf6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2203      	movs	r2, #3
 8002986:	4013      	ands	r3, r2
 8002988:	2b01      	cmp	r3, #1
 800298a:	d005      	beq.n	8002998 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2203      	movs	r2, #3
 8002992:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002994:	2b02      	cmp	r3, #2
 8002996:	d130      	bne.n	80029fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
 80029a8:	43da      	mvns	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ce:	2201      	movs	r2, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	43da      	mvns	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	2201      	movs	r2, #1
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d017      	beq.n	8002a36 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	43da      	mvns	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d123      	bne.n	8002a8a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	58d3      	ldr	r3, [r2, r3]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2207      	movs	r2, #7
 8002a54:	4013      	ands	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2107      	movs	r1, #7
 8002a6e:	400b      	ands	r3, r1
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	409a      	lsls	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	6939      	ldr	r1, [r7, #16]
 8002a88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	23c0      	movs	r3, #192	@ 0xc0
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d100      	bne.n	8002acc <HAL_GPIO_Init+0x17c>
 8002aca:	e094      	b.n	8002bf6 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <HAL_GPIO_Init+0x2c4>)
 8002ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad0:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <HAL_GPIO_Init+0x2c4>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <HAL_GPIO_Init+0x2c8>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	589b      	ldr	r3, [r3, r2]
 8002ae4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	4013      	ands	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	409a      	lsls	r2, r3
 8002af2:	0013      	movs	r3, r2
 8002af4:	43da      	mvns	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	23a0      	movs	r3, #160	@ 0xa0
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x1de>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a44      	ldr	r2, [pc, #272]	@ (8002c1c <HAL_GPIO_Init+0x2cc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a43      	ldr	r2, [pc, #268]	@ (8002c20 <HAL_GPIO_Init+0x2d0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x1d6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a42      	ldr	r2, [pc, #264]	@ (8002c24 <HAL_GPIO_Init+0x2d4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x1d2>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x1e0>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e004      	b.n	8002b30 <HAL_GPIO_Init+0x1e0>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_Init+0x1e0>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_GPIO_Init+0x1e0>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	2103      	movs	r1, #3
 8002b34:	400a      	ands	r2, r1
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	4093      	lsls	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b40:	4935      	ldr	r1, [pc, #212]	@ (8002c18 <HAL_GPIO_Init+0x2c8>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	035b      	lsls	r3, r3, #13
 8002b66:	4013      	ands	r3, r2
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b72:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b78:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	2380      	movs	r3, #128	@ 0x80
 8002b8e:	039b      	lsls	r3, r3, #14
 8002b90:	4013      	ands	r3, r2
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002ba2:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	4013      	ands	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <HAL_GPIO_Init+0x2d8>)
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	1e13      	subs	r3, r2, #0
 8002c06:	d000      	beq.n	8002c0a <HAL_GPIO_Init+0x2ba>
 8002c08:	e6ae      	b.n	8002968 <HAL_GPIO_Init+0x18>
  }
}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b006      	add	sp, #24
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	50000400 	.word	0x50000400
 8002c20:	50000800 	.word	0x50000800
 8002c24:	50001c00 	.word	0x50001c00
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	000a      	movs	r2, r1
 8002c36:	1cbb      	adds	r3, r7, #2
 8002c38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	1cba      	adds	r2, r7, #2
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	4013      	ands	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c46:	230f      	movs	r3, #15
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e003      	b.n	8002c58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c50:	230f      	movs	r3, #15
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c58:	230f      	movs	r3, #15
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	0008      	movs	r0, r1
 8002c70:	0011      	movs	r1, r2
 8002c72:	1cbb      	adds	r3, r7, #2
 8002c74:	1c02      	adds	r2, r0, #0
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	1c7b      	adds	r3, r7, #1
 8002c7a:	1c0a      	adds	r2, r1, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7e:	1c7b      	adds	r3, r7, #1
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	1cbb      	adds	r3, r7, #2
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c8e:	e003      	b.n	8002c98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c90:	1cbb      	adds	r3, r7, #2
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 fb6c 	bl	800338c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4bc8      	ldr	r3, [pc, #800]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	220c      	movs	r2, #12
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbe:	4bc6      	ldr	r3, [pc, #792]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	025b      	lsls	r3, r3, #9
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x36>
 8002cd4:	e07d      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d007      	beq.n	8002cec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x68>
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4bba      	ldr	r3, [pc, #744]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	029b      	lsls	r3, r3, #10
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <HAL_RCC_OscConfig+0x5a>
 8002cf8:	e06a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x130>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d166      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f000 fb42 	bl	800338c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	025b      	lsls	r3, r3, #9
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x84>
 8002d14:	4bb0      	ldr	r3, [pc, #704]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4baf      	ldr	r3, [pc, #700]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	0249      	lsls	r1, r1, #9
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e027      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	23a0      	movs	r3, #160	@ 0xa0
 8002d2a:	02db      	lsls	r3, r3, #11
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10e      	bne.n	8002d4e <HAL_RCC_OscConfig+0xae>
 8002d30:	4ba9      	ldr	r3, [pc, #676]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba8      	ldr	r3, [pc, #672]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	02c9      	lsls	r1, r1, #11
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4ba5      	ldr	r3, [pc, #660]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	0249      	lsls	r1, r1, #9
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e012      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d4e:	4ba2      	ldr	r3, [pc, #648]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4ba1      	ldr	r3, [pc, #644]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d54:	49a1      	ldr	r1, [pc, #644]	@ (8002fdc <HAL_RCC_OscConfig+0x33c>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	4b9f      	ldr	r3, [pc, #636]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4b9b      	ldr	r3, [pc, #620]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d6e:	499c      	ldr	r1, [pc, #624]	@ (8002fe0 <HAL_RCC_OscConfig+0x340>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d014      	beq.n	8002da6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe ffcc 	bl	8001d18 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d86:	f7fe ffc7 	bl	8001d18 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	@ 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e2f9      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d98:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0xe6>
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe ffb7 	bl	8001d18 <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe ffb2 	bl	8001d18 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e2e4      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc2:	4b85      	ldr	r3, [pc, #532]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x110>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_RCC_OscConfig+0x13e>
 8002ddc:	e099      	b.n	8002f12 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	2220      	movs	r2, #32
 8002de8:	4013      	ands	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dec:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b79      	ldr	r3, [pc, #484]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002df2:	2120      	movs	r1, #32
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	4393      	bics	r3, r2
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d13e      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1ea>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13b      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e12:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2204      	movs	r2, #4
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_RCC_OscConfig+0x186>
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e2b2      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe4 <HAL_RCC_OscConfig+0x344>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	4b68      	ldr	r3, [pc, #416]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e3c:	4b66      	ldr	r3, [pc, #408]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2209      	movs	r2, #9
 8002e42:	4393      	bics	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 fbeb 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8002e52:	0001      	movs	r1, r0
 8002e54:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	4a62      	ldr	r2, [pc, #392]	@ (8002fe8 <HAL_RCC_OscConfig+0x348>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	000a      	movs	r2, r1
 8002e64:	40da      	lsrs	r2, r3
 8002e66:	4b61      	ldr	r3, [pc, #388]	@ (8002fec <HAL_RCC_OscConfig+0x34c>)
 8002e68:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <HAL_RCC_OscConfig+0x350>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2513      	movs	r5, #19
 8002e70:	197c      	adds	r4, r7, r5
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fe ff0a 	bl	8001c8c <HAL_InitTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e7c:	197b      	adds	r3, r7, r5
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d046      	beq.n	8002f12 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002e84:	197b      	adds	r3, r7, r5
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	e280      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d027      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2209      	movs	r2, #9
 8002e96:	4393      	bics	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ff39 	bl	8001d18 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe ff34 	bl	8001d18 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e266      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ebe:	4b46      	ldr	r3, [pc, #280]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d0f1      	beq.n	8002eac <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b43      	ldr	r3, [pc, #268]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <HAL_RCC_OscConfig+0x344>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	021a      	lsls	r2, r3, #8
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e018      	b.n	8002f12 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe ff14 	bl	8001d18 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe ff0f 	bl	8001d18 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e241      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f08:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d1f1      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2210      	movs	r2, #16
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x27e>
 8002f1c:	e0a1      	b.n	8003062 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d140      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f24:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_OscConfig+0x29c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e227      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff4 <HAL_RCC_OscConfig+0x354>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	0a19      	lsrs	r1, r3, #8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	061a      	lsls	r2, r3, #24
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	0b5b      	lsrs	r3, r3, #13
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	0212      	lsls	r2, r2, #8
 8002f70:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f72:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	210f      	movs	r1, #15
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	491a      	ldr	r1, [pc, #104]	@ (8002fe8 <HAL_RCC_OscConfig+0x348>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <HAL_RCC_OscConfig+0x34c>)
 8002f84:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_RCC_OscConfig+0x350>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2513      	movs	r5, #19
 8002f8c:	197c      	adds	r4, r7, r5
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fe fe7c 	bl	8001c8c <HAL_InitTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f98:	197b      	adds	r3, r7, r5
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d060      	beq.n	8003062 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002fa0:	197b      	adds	r3, r7, r5
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	e1f2      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03f      	beq.n	800302e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_RCC_OscConfig+0x338>)
 8002fb4:	2180      	movs	r1, #128	@ 0x80
 8002fb6:	0049      	lsls	r1, r1, #1
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe feac 	bl	8001d18 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fea7 	bl	8001d18 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d911      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1d9      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	fffeffff 	.word	0xfffeffff
 8002fe0:	fffbffff 	.word	0xfffbffff
 8002fe4:	ffffe0ff 	.word	0xffffe0ff
 8002fe8:	080044b4 	.word	0x080044b4
 8002fec:	20000014 	.word	0x20000014
 8002ff0:	20000018 	.word	0x20000018
 8002ff4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff8:	4bc9      	ldr	r3, [pc, #804]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d0e0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4bc6      	ldr	r3, [pc, #792]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4ac6      	ldr	r2, [pc, #792]	@ (8003324 <HAL_RCC_OscConfig+0x684>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	4bc3      	ldr	r3, [pc, #780]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003018:	4bc1      	ldr	r3, [pc, #772]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	0a19      	lsrs	r1, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	061a      	lsls	r2, r3, #24
 8003026:	4bbe      	ldr	r3, [pc, #760]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e019      	b.n	8003062 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800302e:	4bbc      	ldr	r3, [pc, #752]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4bbb      	ldr	r3, [pc, #748]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003034:	49bc      	ldr	r1, [pc, #752]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 8003036:	400a      	ands	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe fe6d 	bl	8001d18 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003044:	f7fe fe68 	bl	8001d18 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e19a      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003056:	4bb2      	ldr	r3, [pc, #712]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4baa      	ldr	r3, [pc, #680]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003078:	4ba9      	ldr	r3, [pc, #676]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800307a:	2101      	movs	r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fe fe4a 	bl	8001d18 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fe45 	bl	8001d18 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e177      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309c:	4ba0      	ldr	r3, [pc, #640]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800309e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0f1      	beq.n	800308a <HAL_RCC_OscConfig+0x3ea>
 80030a6:	e018      	b.n	80030da <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b9d      	ldr	r3, [pc, #628]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80030aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fe30 	bl	8001d18 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030be:	f7fe fe2b 	bl	8001d18 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e15d      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d0:	4b93      	ldr	r3, [pc, #588]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80030d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d1f1      	bne.n	80030be <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2204      	movs	r2, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d100      	bne.n	80030e6 <HAL_RCC_OscConfig+0x446>
 80030e4:	e0ae      	b.n	8003244 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2023      	movs	r0, #35	@ 0x23
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80030f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	055b      	lsls	r3, r3, #21
 80030f6:	4013      	ands	r3, r2
 80030f8:	d109      	bne.n	800310e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b89      	ldr	r3, [pc, #548]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80030fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030fe:	4b88      	ldr	r3, [pc, #544]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	0549      	lsls	r1, r1, #21
 8003104:	430a      	orrs	r2, r1
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003108:	183b      	adds	r3, r7, r0
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b87      	ldr	r3, [pc, #540]	@ (800332c <HAL_RCC_OscConfig+0x68c>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b84      	ldr	r3, [pc, #528]	@ (800332c <HAL_RCC_OscConfig+0x68c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b83      	ldr	r3, [pc, #524]	@ (800332c <HAL_RCC_OscConfig+0x68c>)
 8003120:	2180      	movs	r1, #128	@ 0x80
 8003122:	0049      	lsls	r1, r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fe fdf6 	bl	8001d18 <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe fdf1 	bl	8001d18 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	@ 0x64
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e123      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b79      	ldr	r3, [pc, #484]	@ (800332c <HAL_RCC_OscConfig+0x68c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x4cc>
 800315c:	4b70      	ldr	r3, [pc, #448]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800315e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003160:	4b6f      	ldr	r3, [pc, #444]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003162:	2180      	movs	r1, #128	@ 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	651a      	str	r2, [r3, #80]	@ 0x50
 800316a:	e031      	b.n	80031d0 <HAL_RCC_OscConfig+0x530>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10c      	bne.n	800318e <HAL_RCC_OscConfig+0x4ee>
 8003174:	4b6a      	ldr	r3, [pc, #424]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003178:	4b69      	ldr	r3, [pc, #420]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800317a:	496b      	ldr	r1, [pc, #428]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 800317c:	400a      	ands	r2, r1
 800317e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003180:	4b67      	ldr	r3, [pc, #412]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003184:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003186:	496a      	ldr	r1, [pc, #424]	@ (8003330 <HAL_RCC_OscConfig+0x690>)
 8003188:	400a      	ands	r2, r1
 800318a:	651a      	str	r2, [r3, #80]	@ 0x50
 800318c:	e020      	b.n	80031d0 <HAL_RCC_OscConfig+0x530>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	23a0      	movs	r3, #160	@ 0xa0
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	429a      	cmp	r2, r3
 8003198:	d10e      	bne.n	80031b8 <HAL_RCC_OscConfig+0x518>
 800319a:	4b61      	ldr	r3, [pc, #388]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800319c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800319e:	4b60      	ldr	r3, [pc, #384]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031a0:	2180      	movs	r1, #128	@ 0x80
 80031a2:	00c9      	lsls	r1, r1, #3
 80031a4:	430a      	orrs	r2, r1
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031ae:	2180      	movs	r1, #128	@ 0x80
 80031b0:	0049      	lsls	r1, r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x530>
 80031b8:	4b59      	ldr	r3, [pc, #356]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031bc:	4b58      	ldr	r3, [pc, #352]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031be:	495a      	ldr	r1, [pc, #360]	@ (8003328 <HAL_RCC_OscConfig+0x688>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031c4:	4b56      	ldr	r3, [pc, #344]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031c8:	4b55      	ldr	r3, [pc, #340]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031ca:	4959      	ldr	r1, [pc, #356]	@ (8003330 <HAL_RCC_OscConfig+0x690>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fe fd9e 	bl	8001d18 <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e0:	e009      	b.n	80031f6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fd99 	bl	8001d18 <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	4a51      	ldr	r2, [pc, #324]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0ca      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80031f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d0ef      	beq.n	80031e2 <HAL_RCC_OscConfig+0x542>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe fd88 	bl	8001d18 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800320c:	e009      	b.n	8003222 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fd83 	bl	8001d18 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	4a46      	ldr	r2, [pc, #280]	@ (8003334 <HAL_RCC_OscConfig+0x694>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0b4      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003222:	4b3f      	ldr	r3, [pc, #252]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d1ef      	bne.n	800320e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322e:	2323      	movs	r3, #35	@ 0x23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b39      	ldr	r3, [pc, #228]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800323a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323c:	4b38      	ldr	r3, [pc, #224]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 800323e:	493e      	ldr	r1, [pc, #248]	@ (8003338 <HAL_RCC_OscConfig+0x698>)
 8003240:	400a      	ands	r2, r1
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d100      	bne.n	800324e <HAL_RCC_OscConfig+0x5ae>
 800324c:	e09d      	b.n	800338a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d100      	bne.n	8003256 <HAL_RCC_OscConfig+0x5b6>
 8003254:	e076      	b.n	8003344 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	2b02      	cmp	r3, #2
 800325c:	d145      	bne.n	80032ea <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b30      	ldr	r3, [pc, #192]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003264:	4935      	ldr	r1, [pc, #212]	@ (800333c <HAL_RCC_OscConfig+0x69c>)
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fd55 	bl	8001d18 <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fd50 	bl	8001d18 <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e082      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003286:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	049b      	lsls	r3, r3, #18
 800328e:	4013      	ands	r3, r2
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003292:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a2a      	ldr	r2, [pc, #168]	@ (8003340 <HAL_RCC_OscConfig+0x6a0>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	431a      	orrs	r2, r3
 80032ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032ae:	430a      	orrs	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032b8:	2180      	movs	r1, #128	@ 0x80
 80032ba:	0449      	lsls	r1, r1, #17
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fd2a 	bl	8001d18 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fd25 	bl	8001d18 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e057      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032dc:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	049b      	lsls	r3, r3, #18
 80032e4:	4013      	ands	r3, r2
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x62a>
 80032e8:	e04f      	b.n	800338a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 80032f0:	4912      	ldr	r1, [pc, #72]	@ (800333c <HAL_RCC_OscConfig+0x69c>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fd0f 	bl	8001d18 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fd0a 	bl	8001d18 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e03c      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003312:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_RCC_OscConfig+0x680>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	049b      	lsls	r3, r3, #18
 800331a:	4013      	ands	r3, r2
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x660>
 800331e:	e034      	b.n	800338a <HAL_RCC_OscConfig+0x6ea>
 8003320:	40021000 	.word	0x40021000
 8003324:	ffff1fff 	.word	0xffff1fff
 8003328:	fffffeff 	.word	0xfffffeff
 800332c:	40007000 	.word	0x40007000
 8003330:	fffffbff 	.word	0xfffffbff
 8003334:	00001388 	.word	0x00001388
 8003338:	efffffff 	.word	0xefffffff
 800333c:	feffffff 	.word	0xfeffffff
 8003340:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <HAL_RCC_OscConfig+0x6f4>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	025b      	lsls	r3, r3, #9
 800335c:	401a      	ands	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	429a      	cmp	r2, r3
 8003364:	d10f      	bne.n	8003386 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	23f0      	movs	r3, #240	@ 0xf0
 800336a:	039b      	lsls	r3, r3, #14
 800336c:	401a      	ands	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	23c0      	movs	r3, #192	@ 0xc0
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	401a      	ands	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b00a      	add	sp, #40	@ 0x28
 8003392:	bdb0      	pop	{r4, r5, r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e128      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b96      	ldr	r3, [pc, #600]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2201      	movs	r2, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d91e      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b93      	ldr	r3, [pc, #588]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	4393      	bics	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	4b90      	ldr	r3, [pc, #576]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033cc:	f7fe fca4 	bl	8001d18 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	e009      	b.n	80033ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d6:	f7fe fc9f 	bl	8001d18 <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	4a8a      	ldr	r2, [pc, #552]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e109      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b87      	ldr	r3, [pc, #540]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2202      	movs	r2, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003402:	4b83      	ldr	r3, [pc, #524]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	22f0      	movs	r2, #240	@ 0xf0
 8003408:	4393      	bics	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	4b7f      	ldr	r3, [pc, #508]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCC_ClockConfig+0x8a>
 8003420:	e089      	b.n	8003536 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342a:	4b79      	ldr	r3, [pc, #484]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	4013      	ands	r3, r2
 8003434:	d120      	bne.n	8003478 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0e1      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003442:	4b73      	ldr	r3, [pc, #460]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	049b      	lsls	r3, r3, #18
 800344a:	4013      	ands	r3, r2
 800344c:	d114      	bne.n	8003478 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0d5      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d106      	bne.n	8003468 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2204      	movs	r2, #4
 8003460:	4013      	ands	r3, r2
 8003462:	d109      	bne.n	8003478 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0ca      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003468:	4b69      	ldr	r3, [pc, #420]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0c2      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003478:	4b65      	ldr	r3, [pc, #404]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2203      	movs	r2, #3
 800347e:	4393      	bics	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4b62      	ldr	r3, [pc, #392]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 8003488:	430a      	orrs	r2, r1
 800348a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fc44 	bl	8001d18 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d111      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	e009      	b.n	80034b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349e:	f7fe fc3b 	bl	8001d18 <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	4a58      	ldr	r2, [pc, #352]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0a5      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b2:	4b57      	ldr	r3, [pc, #348]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	220c      	movs	r2, #12
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d1ef      	bne.n	800349e <HAL_RCC_ClockConfig+0x106>
 80034be:	e03a      	b.n	8003536 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d111      	bne.n	80034ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c8:	e009      	b.n	80034de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7fe fc25 	bl	8001d18 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	4a4d      	ldr	r2, [pc, #308]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e08f      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034de:	4b4c      	ldr	r3, [pc, #304]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	220c      	movs	r2, #12
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d1ef      	bne.n	80034ca <HAL_RCC_ClockConfig+0x132>
 80034ea:	e024      	b.n	8003536 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d11b      	bne.n	800352c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f4:	e009      	b.n	800350a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f6:	f7fe fc0f 	bl	8001d18 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	4a42      	ldr	r2, [pc, #264]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e079      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	220c      	movs	r2, #12
 8003510:	4013      	ands	r3, r2
 8003512:	2b04      	cmp	r3, #4
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x15e>
 8003516:	e00e      	b.n	8003536 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fbfe 	bl	8001d18 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	4a3a      	ldr	r2, [pc, #232]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e068      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800352c:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	220c      	movs	r2, #12
 8003532:	4013      	ands	r3, r2
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	4013      	ands	r3, r2
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d21e      	bcs.n	8003582 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b30      	ldr	r3, [pc, #192]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	4393      	bics	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003556:	f7fe fbdf 	bl	8001d18 <HAL_GetTick>
 800355a:	0003      	movs	r3, r0
 800355c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	e009      	b.n	8003574 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003560:	f7fe fbda 	bl	8001d18 <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4a28      	ldr	r2, [pc, #160]	@ (800360c <HAL_RCC_ClockConfig+0x274>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e044      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_ClockConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d1ee      	bne.n	8003560 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2204      	movs	r2, #4
 8003588:	4013      	ands	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <HAL_RCC_ClockConfig+0x27c>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b1d      	ldr	r3, [pc, #116]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	4013      	ands	r3, r2
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035aa:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <HAL_RCC_ClockConfig+0x280>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	0019      	movs	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00da      	lsls	r2, r3, #3
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c0:	f000 f832 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035c4:	0001      	movs	r1, r0
 80035c6:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <HAL_RCC_ClockConfig+0x278>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	220f      	movs	r2, #15
 80035ce:	4013      	ands	r3, r2
 80035d0:	4a12      	ldr	r2, [pc, #72]	@ (800361c <HAL_RCC_ClockConfig+0x284>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	000a      	movs	r2, r1
 80035d6:	40da      	lsrs	r2, r3
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_RCC_ClockConfig+0x288>)
 80035da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035dc:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <HAL_RCC_ClockConfig+0x28c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	250b      	movs	r5, #11
 80035e2:	197c      	adds	r4, r7, r5
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fe fb51 	bl	8001c8c <HAL_InitTick>
 80035ea:	0003      	movs	r3, r0
 80035ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035ee:	197b      	adds	r3, r7, r5
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035f6:	197b      	adds	r3, r7, r5
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	e000      	b.n	80035fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bdb0      	pop	{r4, r5, r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	40022000 	.word	0x40022000
 800360c:	00001388 	.word	0x00001388
 8003610:	40021000 	.word	0x40021000
 8003614:	fffff8ff 	.word	0xfffff8ff
 8003618:	ffffc7ff 	.word	0xffffc7ff
 800361c:	080044b4 	.word	0x080044b4
 8003620:	20000014 	.word	0x20000014
 8003624:	20000018 	.word	0x20000018

08003628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b08e      	sub	sp, #56	@ 0x38
 800362c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800362e:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003636:	230c      	movs	r3, #12
 8003638:	4013      	ands	r3, r2
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d014      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 800363e:	d900      	bls.n	8003642 <HAL_RCC_GetSysClockFreq+0x1a>
 8003640:	e07b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x112>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d002      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x24>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x3a>
 800364a:	e076      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800364c:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	4013      	ands	r3, r2
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003656:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003658:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800365a:	e07c      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800365c:	4b42      	ldr	r3, [pc, #264]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x140>)
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003660:	e079      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003662:	4b42      	ldr	r3, [pc, #264]	@ (800376c <HAL_RCC_GetSysClockFreq+0x144>)
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003666:	e076      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	0c9a      	lsrs	r2, r3, #18
 800366c:	230f      	movs	r3, #15
 800366e:	401a      	ands	r2, r3
 8003670:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x148>)
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	0d9a      	lsrs	r2, r3, #22
 800367a:	2303      	movs	r3, #3
 800367c:	4013      	ands	r3, r2
 800367e:	3301      	adds	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003682:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	025b      	lsls	r3, r3, #9
 800368a:	4013      	ands	r3, r2
 800368c:	d01a      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	4a35      	ldr	r2, [pc, #212]	@ (800376c <HAL_RCC_GetSysClockFreq+0x144>)
 8003698:	2300      	movs	r3, #0
 800369a:	69b8      	ldr	r0, [r7, #24]
 800369c:	69f9      	ldr	r1, [r7, #28]
 800369e:	f7fc fe19 	bl	80002d4 <__aeabi_lmul>
 80036a2:	0002      	movs	r2, r0
 80036a4:	000b      	movs	r3, r1
 80036a6:	0010      	movs	r0, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f7fc fded 	bl	8000294 <__aeabi_uldivmod>
 80036ba:	0002      	movs	r2, r0
 80036bc:	000b      	movs	r3, r1
 80036be:	0013      	movs	r3, r2
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c2:	e037      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036c4:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	4013      	ands	r3, r2
 80036cc:	d01a      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4a23      	ldr	r2, [pc, #140]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036d8:	2300      	movs	r3, #0
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	68f9      	ldr	r1, [r7, #12]
 80036de:	f7fc fdf9 	bl	80002d4 <__aeabi_lmul>
 80036e2:	0002      	movs	r2, r0
 80036e4:	000b      	movs	r3, r1
 80036e6:	0010      	movs	r0, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f7fc fdcd 	bl	8000294 <__aeabi_uldivmod>
 80036fa:	0002      	movs	r2, r0
 80036fc:	000b      	movs	r3, r1
 80036fe:	0013      	movs	r3, r2
 8003700:	637b      	str	r3, [r7, #52]	@ 0x34
 8003702:	e017      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	0018      	movs	r0, r3
 8003708:	2300      	movs	r3, #0
 800370a:	0019      	movs	r1, r3
 800370c:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x140>)
 800370e:	2300      	movs	r3, #0
 8003710:	f7fc fde0 	bl	80002d4 <__aeabi_lmul>
 8003714:	0002      	movs	r2, r0
 8003716:	000b      	movs	r3, r1
 8003718:	0010      	movs	r0, r2
 800371a:	0019      	movs	r1, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	001c      	movs	r4, r3
 8003720:	2300      	movs	r3, #0
 8003722:	001d      	movs	r5, r3
 8003724:	0022      	movs	r2, r4
 8003726:	002b      	movs	r3, r5
 8003728:	f7fc fdb4 	bl	8000294 <__aeabi_uldivmod>
 800372c:	0002      	movs	r2, r0
 800372e:	000b      	movs	r3, r1
 8003730:	0013      	movs	r3, r2
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003738:	e00d      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0b5b      	lsrs	r3, r3, #13
 8003740:	2207      	movs	r2, #7
 8003742:	4013      	ands	r3, r2
 8003744:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	3301      	adds	r3, #1
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	0212      	lsls	r2, r2, #8
 800374e:	409a      	lsls	r2, r3
 8003750:	0013      	movs	r3, r2
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003754:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b00e      	add	sp, #56	@ 0x38
 800375e:	bdb0      	pop	{r4, r5, r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	003d0900 	.word	0x003d0900
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200
 8003770:	080044cc 	.word	0x080044cc

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b02      	ldr	r3, [pc, #8]	@ (8003784 <HAL_RCC_GetHCLKFreq+0x10>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	20000014 	.word	0x20000014

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff2 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003790:	0001      	movs	r1, r0
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	2207      	movs	r2, #7
 800379a:	4013      	ands	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	40d9      	lsrs	r1, r3
 80037a2:	000b      	movs	r3, r1
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	40021000 	.word	0x40021000
 80037b0:	080044c4 	.word	0x080044c4

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	0001      	movs	r1, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	0adb      	lsrs	r3, r3, #11
 80037c4:	2207      	movs	r2, #7
 80037c6:	4013      	ands	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	40d9      	lsrs	r1, r3
 80037ce:	000b      	movs	r3, r1
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	40021000 	.word	0x40021000
 80037dc:	080044c4 	.word	0x080044c4

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037e8:	2017      	movs	r0, #23
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2220      	movs	r2, #32
 80037f6:	4013      	ands	r3, r2
 80037f8:	d100      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80037fa:	e0c7      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037fc:	4b84      	ldr	r3, [pc, #528]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	055b      	lsls	r3, r3, #21
 8003804:	4013      	ands	r3, r2
 8003806:	d109      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	4b81      	ldr	r3, [pc, #516]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800380a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800380c:	4b80      	ldr	r3, [pc, #512]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	0549      	lsls	r1, r1, #21
 8003812:	430a      	orrs	r2, r1
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003816:	183b      	adds	r3, r7, r0
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d11a      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003828:	4b7a      	ldr	r3, [pc, #488]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b79      	ldr	r3, [pc, #484]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800382e:	2180      	movs	r1, #128	@ 0x80
 8003830:	0049      	lsls	r1, r1, #1
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fa6f 	bl	8001d18 <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe fa6a 	bl	8001d18 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0d9      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b70      	ldr	r3, [pc, #448]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d0f0      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800385e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	23c0      	movs	r3, #192	@ 0xc0
 8003864:	039b      	lsls	r3, r3, #14
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	23c0      	movs	r3, #192	@ 0xc0
 8003870:	039b      	lsls	r3, r3, #14
 8003872:	4013      	ands	r3, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	429a      	cmp	r2, r3
 8003878:	d013      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	23c0      	movs	r3, #192	@ 0xc0
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	401a      	ands	r2, r3
 8003884:	23c0      	movs	r3, #192	@ 0xc0
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	429a      	cmp	r2, r3
 800388a:	d10a      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800388c:	4b60      	ldr	r3, [pc, #384]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	029b      	lsls	r3, r3, #10
 8003894:	401a      	ands	r2, r3
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	429a      	cmp	r2, r3
 800389c:	d101      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0b1      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80038a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038a6:	23c0      	movs	r3, #192	@ 0xc0
 80038a8:	029b      	lsls	r3, r3, #10
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	23c0      	movs	r3, #192	@ 0xc0
 80038ba:	029b      	lsls	r3, r3, #10
 80038bc:	4013      	ands	r3, r2
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d033      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2220      	movs	r2, #32
 80038ca:	4013      	ands	r3, r2
 80038cc:	d02e      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038ce:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d2:	4a51      	ldr	r2, [pc, #324]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038de:	2180      	movs	r1, #128	@ 0x80
 80038e0:	0309      	lsls	r1, r1, #12
 80038e2:	430a      	orrs	r2, r1
 80038e4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038ec:	494b      	ldr	r1, [pc, #300]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038ee:	400a      	ands	r2, r1
 80038f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	2380      	movs	r3, #128	@ 0x80
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	d014      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fe fa09 	bl	8001d18 <HAL_GetTick>
 8003906:	0003      	movs	r3, r0
 8003908:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390a:	e009      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fe fa04 	bl	8001d18 <HAL_GetTick>
 8003910:	0002      	movs	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	4a42      	ldr	r2, [pc, #264]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e072      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003922:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4013      	ands	r3, r2
 800392a:	d0ef      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	4013      	ands	r3, r2
 8003934:	d01f      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	23c0      	movs	r3, #192	@ 0xc0
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	401a      	ands	r2, r3
 8003940:	23c0      	movs	r3, #192	@ 0xc0
 8003942:	029b      	lsls	r3, r3, #10
 8003944:	429a      	cmp	r2, r3
 8003946:	d10c      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003948:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a35      	ldr	r2, [pc, #212]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	23c0      	movs	r3, #192	@ 0xc0
 8003958:	039b      	lsls	r3, r3, #14
 800395a:	401a      	ands	r2, r3
 800395c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4b2b      	ldr	r3, [pc, #172]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003964:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	23c0      	movs	r3, #192	@ 0xc0
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	401a      	ands	r2, r3
 8003970:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003972:	430a      	orrs	r2, r1
 8003974:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003976:	2317      	movs	r3, #23
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003984:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003986:	4928      	ldr	r1, [pc, #160]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003988:	400a      	ands	r2, r1
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2202      	movs	r2, #2
 8003992:	4013      	ands	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	220c      	movs	r2, #12
 800399c:	4393      	bics	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039a6:	430a      	orrs	r2, r1
 80039a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039b4:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d6:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039d8:	4013      	ands	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e2:	430a      	orrs	r2, r1
 80039e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b006      	add	sp, #24
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	fffcffff 	.word	0xfffcffff
 8003a1c:	fff7ffff 	.word	0xfff7ffff
 8003a20:	00001388 	.word	0x00001388
 8003a24:	ffcfffff 	.word	0xffcfffff
 8003a28:	efffffff 	.word	0xefffffff
 8003a2c:	fffff3ff 	.word	0xfffff3ff
 8003a30:	ffffcfff 	.word	0xffffcfff
 8003a34:	fff3ffff 	.word	0xfff3ffff

08003a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e044      	b.n	8003ad4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2278      	movs	r2, #120	@ 0x78
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fe f81f 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2224      	movs	r2, #36	@ 0x24
 8003a66:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 f830 	bl	8003ae0 <UART_SetConfig>
 8003a80:	0003      	movs	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e024      	b.n	8003ad4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 fa6d 	bl	8003f74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	490d      	ldr	r1, [pc, #52]	@ (8003adc <HAL_UART_Init+0xa4>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	212a      	movs	r1, #42	@ 0x2a
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 fb05 	bl	80040dc <UART_CheckIdleState>
 8003ad2:	0003      	movs	r3, r0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	ffffb7ff 	.word	0xffffb7ff

08003ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	b5b0      	push	{r4, r5, r7, lr}
 8003ae2:	b08e      	sub	sp, #56	@ 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae8:	231a      	movs	r3, #26
 8003aea:	2218      	movs	r2, #24
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4ab4      	ldr	r2, [pc, #720]	@ (8003de4 <UART_SetConfig+0x304>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4aaf      	ldr	r2, [pc, #700]	@ (8003de8 <UART_SetConfig+0x308>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4aa9      	ldr	r2, [pc, #676]	@ (8003dec <UART_SetConfig+0x30c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b50:	4313      	orrs	r3, r2
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4aa5      	ldr	r2, [pc, #660]	@ (8003df0 <UART_SetConfig+0x310>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4aa1      	ldr	r2, [pc, #644]	@ (8003df4 <UART_SetConfig+0x314>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d131      	bne.n	8003bd8 <UART_SetConfig+0xf8>
 8003b74:	4ba0      	ldr	r3, [pc, #640]	@ (8003df8 <UART_SetConfig+0x318>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b78:	220c      	movs	r2, #12
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b0c      	cmp	r3, #12
 8003b7e:	d01d      	beq.n	8003bbc <UART_SetConfig+0xdc>
 8003b80:	d823      	bhi.n	8003bca <UART_SetConfig+0xea>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d00c      	beq.n	8003ba0 <UART_SetConfig+0xc0>
 8003b86:	d820      	bhi.n	8003bca <UART_SetConfig+0xea>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <UART_SetConfig+0xb2>
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00e      	beq.n	8003bae <UART_SetConfig+0xce>
 8003b90:	e01b      	b.n	8003bca <UART_SetConfig+0xea>
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e065      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003ba0:	231b      	movs	r3, #27
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e05e      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bae:	231b      	movs	r3, #27
 8003bb0:	2218      	movs	r2, #24
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	19db      	adds	r3, r3, r7
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e057      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bbc:	231b      	movs	r3, #27
 8003bbe:	2218      	movs	r2, #24
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	19db      	adds	r3, r3, r7
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e050      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bca:	231b      	movs	r3, #27
 8003bcc:	2218      	movs	r2, #24
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e049      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a83      	ldr	r2, [pc, #524]	@ (8003dec <UART_SetConfig+0x30c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d13e      	bne.n	8003c60 <UART_SetConfig+0x180>
 8003be2:	4b85      	ldr	r3, [pc, #532]	@ (8003df8 <UART_SetConfig+0x318>)
 8003be4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003be6:	23c0      	movs	r3, #192	@ 0xc0
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	22c0      	movs	r2, #192	@ 0xc0
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <UART_SetConfig+0x164>
 8003bf4:	22c0      	movs	r2, #192	@ 0xc0
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d82a      	bhi.n	8003c52 <UART_SetConfig+0x172>
 8003bfc:	2280      	movs	r2, #128	@ 0x80
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d011      	beq.n	8003c28 <UART_SetConfig+0x148>
 8003c04:	2280      	movs	r2, #128	@ 0x80
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d822      	bhi.n	8003c52 <UART_SetConfig+0x172>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <UART_SetConfig+0x13a>
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <UART_SetConfig+0x156>
 8003c18:	e01b      	b.n	8003c52 <UART_SetConfig+0x172>
 8003c1a:	231b      	movs	r3, #27
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e021      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c28:	231b      	movs	r3, #27
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e01a      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c36:	231b      	movs	r3, #27
 8003c38:	2218      	movs	r2, #24
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e013      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c44:	231b      	movs	r3, #27
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e00c      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c52:	231b      	movs	r3, #27
 8003c54:	2218      	movs	r2, #24
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e005      	b.n	8003c6c <UART_SetConfig+0x18c>
 8003c60:	231b      	movs	r3, #27
 8003c62:	2218      	movs	r2, #24
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2210      	movs	r2, #16
 8003c6a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5e      	ldr	r2, [pc, #376]	@ (8003dec <UART_SetConfig+0x30c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d000      	beq.n	8003c78 <UART_SetConfig+0x198>
 8003c76:	e084      	b.n	8003d82 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c78:	231b      	movs	r3, #27
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d01d      	beq.n	8003cc2 <UART_SetConfig+0x1e2>
 8003c86:	dc20      	bgt.n	8003cca <UART_SetConfig+0x1ea>
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d015      	beq.n	8003cb8 <UART_SetConfig+0x1d8>
 8003c8c:	dc1d      	bgt.n	8003cca <UART_SetConfig+0x1ea>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x1b8>
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d005      	beq.n	8003ca2 <UART_SetConfig+0x1c2>
 8003c96:	e018      	b.n	8003cca <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7ff fd76 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ca0:	e01c      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca2:	4b55      	ldr	r3, [pc, #340]	@ (8003df8 <UART_SetConfig+0x318>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d002      	beq.n	8003cb2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cac:	4b53      	ldr	r3, [pc, #332]	@ (8003dfc <UART_SetConfig+0x31c>)
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003cb0:	e014      	b.n	8003cdc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003cb2:	4b53      	ldr	r3, [pc, #332]	@ (8003e00 <UART_SetConfig+0x320>)
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cb6:	e011      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb8:	f7ff fcb6 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cc0:	e00c      	b.n	8003cdc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cc8:	e008      	b.n	8003cdc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003cce:	231a      	movs	r3, #26
 8003cd0:	2218      	movs	r2, #24
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
        break;
 8003cda:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d100      	bne.n	8003ce4 <UART_SetConfig+0x204>
 8003ce2:	e12f      	b.n	8003f44 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	0013      	movs	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d305      	bcc.n	8003d00 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d906      	bls.n	8003d0e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003d00:	231a      	movs	r3, #26
 8003d02:	2218      	movs	r2, #24
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e11a      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	000b      	movs	r3, r1
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	0010      	movs	r0, r2
 8003d20:	0205      	lsls	r5, r0, #8
 8003d22:	431d      	orrs	r5, r3
 8003d24:	000b      	movs	r3, r1
 8003d26:	021c      	lsls	r4, r3, #8
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68b8      	ldr	r0, [r7, #8]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	1900      	adds	r0, r0, r4
 8003d3a:	4169      	adcs	r1, r5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f7fc faa3 	bl	8000294 <__aeabi_uldivmod>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	000b      	movs	r3, r1
 8003d52:	0013      	movs	r3, r2
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d58:	23c0      	movs	r3, #192	@ 0xc0
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d309      	bcc.n	8003d74 <UART_SetConfig+0x294>
 8003d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	035b      	lsls	r3, r3, #13
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d204      	bcs.n	8003d74 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e0e7      	b.n	8003f44 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003d74:	231a      	movs	r3, #26
 8003d76:	2218      	movs	r2, #24
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e0e0      	b.n	8003f44 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d000      	beq.n	8003d90 <UART_SetConfig+0x2b0>
 8003d8e:	e082      	b.n	8003e96 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003d90:	231b      	movs	r3, #27
 8003d92:	2218      	movs	r2, #24
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d834      	bhi.n	8003e08 <UART_SetConfig+0x328>
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <UART_SetConfig+0x324>)
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7ff fcee 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8003dac:	0003      	movs	r3, r0
 8003dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003db0:	e033      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db2:	f7ff fcff 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8003db6:	0003      	movs	r3, r0
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dba:	e02e      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <UART_SetConfig+0x318>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <UART_SetConfig+0x31c>)
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dca:	e026      	b.n	8003e1a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <UART_SetConfig+0x320>)
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dd0:	e023      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7ff fc29 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003dda:	e01e      	b.n	8003e1a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003de2:	e01a      	b.n	8003e1a <UART_SetConfig+0x33a>
 8003de4:	efff69f3 	.word	0xefff69f3
 8003de8:	ffffcfff 	.word	0xffffcfff
 8003dec:	40004800 	.word	0x40004800
 8003df0:	fffff4ff 	.word	0xfffff4ff
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	080044d8 	.word	0x080044d8
      default:
        pclk = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003e0c:	231a      	movs	r3, #26
 8003e0e:	2218      	movs	r2, #24
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	19db      	adds	r3, r3, r7
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
        break;
 8003e18:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d100      	bne.n	8003e22 <UART_SetConfig+0x342>
 8003e20:	e090      	b.n	8003f44 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e24:	005a      	lsls	r2, r3, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	18d2      	adds	r2, r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0019      	movs	r1, r3
 8003e34:	0010      	movs	r0, r2
 8003e36:	f7fc f967 	bl	8000108 <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d921      	bls.n	8003e88 <UART_SetConfig+0x3a8>
 8003e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d21c      	bcs.n	8003e88 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	200e      	movs	r0, #14
 8003e54:	2418      	movs	r4, #24
 8003e56:	1903      	adds	r3, r0, r4
 8003e58:	19db      	adds	r3, r3, r7
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2207      	movs	r2, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	1903      	adds	r3, r0, r4
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	1902      	adds	r2, r0, r4
 8003e72:	19d2      	adds	r2, r2, r7
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1902      	adds	r2, r0, r4
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e05d      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	231a      	movs	r3, #26
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e056      	b.n	8003f44 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e96:	231b      	movs	r3, #27
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d822      	bhi.n	8003eea <UART_SetConfig+0x40a>
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f64 <UART_SetConfig+0x484>)
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eae:	f7ff fc6b 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003eb6:	e021      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7ff fc7c 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ec0:	e01c      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <UART_SetConfig+0x488>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <UART_SetConfig+0x48c>)
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ed0:	e014      	b.n	8003efc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003ed2:	4b27      	ldr	r3, [pc, #156]	@ (8003f70 <UART_SetConfig+0x490>)
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ed6:	e011      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed8:	f7ff fba6 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8003edc:	0003      	movs	r3, r0
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003eee:	231a      	movs	r3, #26
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
        break;
 8003efa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f7fc f8f8 	bl	8000108 <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d90a      	bls.n	8003f38 <UART_SetConfig+0x458>
 8003f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	025b      	lsls	r3, r3, #9
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d205      	bcs.n	8003f38 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e005      	b.n	8003f44 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003f38:	231a      	movs	r3, #26
 8003f3a:	2218      	movs	r2, #24
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2200      	movs	r2, #0
 8003f48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f50:	231a      	movs	r3, #26
 8003f52:	2218      	movs	r2, #24
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b00e      	add	sp, #56	@ 0x38
 8003f60:	bdb0      	pop	{r4, r5, r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	080044fc 	.word	0x080044fc
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	003d0900 	.word	0x003d0900
 8003f70:	00f42400 	.word	0x00f42400

08003f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <UART_AdvFeatureConfig+0x144>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a43      	ldr	r2, [pc, #268]	@ (80040bc <UART_AdvFeatureConfig+0x148>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80040c0 <UART_AdvFeatureConfig+0x14c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d00b      	beq.n	8004004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4a34      	ldr	r2, [pc, #208]	@ (80040c4 <UART_AdvFeatureConfig+0x150>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	2210      	movs	r2, #16
 800400a:	4013      	ands	r3, r2
 800400c:	d00b      	beq.n	8004026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <UART_AdvFeatureConfig+0x154>)
 8004016:	4013      	ands	r3, r2
 8004018:	0019      	movs	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2220      	movs	r2, #32
 800402c:	4013      	ands	r3, r2
 800402e:	d00b      	beq.n	8004048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a25      	ldr	r2, [pc, #148]	@ (80040cc <UART_AdvFeatureConfig+0x158>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	2240      	movs	r2, #64	@ 0x40
 800404e:	4013      	ands	r3, r2
 8004050:	d01d      	beq.n	800408e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <UART_AdvFeatureConfig+0x15c>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800406e:	2380      	movs	r3, #128	@ 0x80
 8004070:	035b      	lsls	r3, r3, #13
 8004072:	429a      	cmp	r2, r3
 8004074:	d10b      	bne.n	800408e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <UART_AdvFeatureConfig+0x160>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	2280      	movs	r2, #128	@ 0x80
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a0e      	ldr	r2, [pc, #56]	@ (80040d8 <UART_AdvFeatureConfig+0x164>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	fffdffff 	.word	0xfffdffff
 80040bc:	fffeffff 	.word	0xfffeffff
 80040c0:	fffbffff 	.word	0xfffbffff
 80040c4:	ffff7fff 	.word	0xffff7fff
 80040c8:	ffffefff 	.word	0xffffefff
 80040cc:	ffffdfff 	.word	0xffffdfff
 80040d0:	ffefffff 	.word	0xffefffff
 80040d4:	ff9fffff 	.word	0xff9fffff
 80040d8:	fff7ffff 	.word	0xfff7ffff

080040dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b092      	sub	sp, #72	@ 0x48
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2284      	movs	r2, #132	@ 0x84
 80040e8:	2100      	movs	r1, #0
 80040ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fd fe14 	bl	8001d18 <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2208      	movs	r2, #8
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d12c      	bne.n	800415c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	0391      	lsls	r1, r2, #14
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4a46      	ldr	r2, [pc, #280]	@ (8004224 <UART_CheckIdleState+0x148>)
 800410c:	9200      	str	r2, [sp, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	f000 f88c 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d021      	beq.n	800415c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004118:	f3ef 8310 	mrs	r3, PRIMASK
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004122:	2301      	movs	r3, #1
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2180      	movs	r1, #128	@ 0x80
 800413a:	438a      	bics	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2278      	movs	r2, #120	@ 0x78
 8004154:	2100      	movs	r1, #0
 8004156:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e05f      	b.n	800421c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	4013      	ands	r3, r2
 8004166:	2b04      	cmp	r3, #4
 8004168:	d146      	bne.n	80041f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	03d1      	lsls	r1, r2, #15
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <UART_CheckIdleState+0x148>)
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f858 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d03b      	beq.n	80041f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004180:	f3ef 8310 	mrs	r3, PRIMASK
 8004184:	60fb      	str	r3, [r7, #12]
  return(result);
 8004186:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
 800418a:	2301      	movs	r3, #1
 800418c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4921      	ldr	r1, [pc, #132]	@ (8004228 <UART_CheckIdleState+0x14c>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80041bc:	2301      	movs	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2101      	movs	r1, #1
 80041d4:	438a      	bics	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	2120      	movs	r1, #32
 80041ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2278      	movs	r2, #120	@ 0x78
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e011      	b.n	800421c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2280      	movs	r2, #128	@ 0x80
 8004202:	2120      	movs	r1, #32
 8004204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2278      	movs	r2, #120	@ 0x78
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b010      	add	sp, #64	@ 0x40
 8004222:	bd80      	pop	{r7, pc}
 8004224:	01ffffff 	.word	0x01ffffff
 8004228:	fffffedf 	.word	0xfffffedf

0800422c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	e04b      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3301      	adds	r3, #1
 8004242:	d048      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fd fd68 	bl	8001d18 <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e04b      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	4013      	ands	r3, r2
 8004268:	d035      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2208      	movs	r2, #8
 8004272:	4013      	ands	r3, r2
 8004274:	2b08      	cmp	r3, #8
 8004276:	d111      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 f83c 	bl	8004300 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2284      	movs	r2, #132	@ 0x84
 800428c:	2108      	movs	r1, #8
 800428e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2278      	movs	r2, #120	@ 0x78
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e02c      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	401a      	ands	r2, r3
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d112      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2280      	movs	r2, #128	@ 0x80
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f81f 	bl	8004300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2284      	movs	r2, #132	@ 0x84
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2278      	movs	r2, #120	@ 0x78
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0a4      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	@ 0x38
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	617b      	str	r3, [r7, #20]
  return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004310:	637b      	str	r3, [r7, #52]	@ 0x34
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			@ (mov r8, r8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4926      	ldr	r1, [pc, #152]	@ (80043c4 <UART_EndRxTransfer+0xc4>)
 800432a:	400a      	ands	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	623b      	str	r3, [r7, #32]
  return(result);
 8004340:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	438a      	bics	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	60bb      	str	r3, [r7, #8]
  return(result);
 800437a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437e:	2301      	movs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2110      	movs	r1, #16
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2280      	movs	r2, #128	@ 0x80
 80043aa:	2120      	movs	r1, #32
 80043ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b00e      	add	sp, #56	@ 0x38
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	fffffedf 	.word	0xfffffedf

080043c8 <memset>:
 80043c8:	0003      	movs	r3, r0
 80043ca:	1882      	adds	r2, r0, r2
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d100      	bne.n	80043d2 <memset+0xa>
 80043d0:	4770      	bx	lr
 80043d2:	7019      	strb	r1, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	e7f9      	b.n	80043cc <memset+0x4>

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	2600      	movs	r6, #0
 80043dc:	4c0c      	ldr	r4, [pc, #48]	@ (8004410 <__libc_init_array+0x38>)
 80043de:	4d0d      	ldr	r5, [pc, #52]	@ (8004414 <__libc_init_array+0x3c>)
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	42a6      	cmp	r6, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	2600      	movs	r6, #0
 80043ea:	f000 f819 	bl	8004420 <_init>
 80043ee:	4c0a      	ldr	r4, [pc, #40]	@ (8004418 <__libc_init_array+0x40>)
 80043f0:	4d0a      	ldr	r5, [pc, #40]	@ (800441c <__libc_init_array+0x44>)
 80043f2:	1b64      	subs	r4, r4, r5
 80043f4:	10a4      	asrs	r4, r4, #2
 80043f6:	42a6      	cmp	r6, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	00b3      	lsls	r3, r6, #2
 80043fe:	58eb      	ldr	r3, [r5, r3]
 8004400:	4798      	blx	r3
 8004402:	3601      	adds	r6, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	00b3      	lsls	r3, r6, #2
 8004408:	58eb      	ldr	r3, [r5, r3]
 800440a:	4798      	blx	r3
 800440c:	3601      	adds	r6, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08004528 	.word	0x08004528
 8004414:	08004528 	.word	0x08004528
 8004418:	0800452c 	.word	0x0800452c
 800441c:	08004528 	.word	0x08004528

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
